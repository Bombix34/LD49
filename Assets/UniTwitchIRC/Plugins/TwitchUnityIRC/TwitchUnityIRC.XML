<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TwitchUnityIRC</name>
    </assembly>
    <members>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.DefaultTagParsers">
            <summary>
            Names of the default classes provided to parse capabilities
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.DefaultTagParsers.RAWTAGS">
            <summary>
            Name of the default Twitch Tags Parser for IRC Tags as strings
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.DefaultTagParsers.PRIMITIVETAGS">
            <summary>
            Name of the default Twitch Tags Parser for IRC Tags as key value set of strings using primitive types
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.DefaultTagParsers.COMPLEXTAGS">
            <summary>
            Name of the default Twitch Tags Parser for IRC Tags as typed objects using custom types
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.AnimatedGif">
            <summary>
            Loads a gif from the file system - link below With some custom modifications
            <para>https://social.microsoft.com/Forums/en-US/fcb7d14d-d15b-4336-971c-94a80e34b85e/editing-animated-gifs-in-c?forum=netfxbcl</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.AnimatedGif.frames">
            <summary>
            Creates texture 2D frames images from an image with it's duration in a gif file
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.AnimatedGif.#ctor">
            <summary>
            Construct an animated gif
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.AnimatedGif.FromFileGIF(System.String)">
            <summary>
            Loads a multi frame (gif) image
            </summary>
            <param name="path">Full path the image including filename and extension</param>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.AnimatedGif.FromFilePNG(System.String)">
            <summary>
            Load a single frame (png) image
            </summary>
            <param name="path">Full path the image including filename and extension</param>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.AnimatedGifFrame">
            <summary>
            Creates a texture 2D from an image with it's duration in a gif file
            <para>https://social.microsoft.com/Forums/en-US/fcb7d14d-d15b-4336-971c-94a80e34b85e/editing-animated-gifs-in-c?forum=netfxbcl</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.AnimatedGifFrame.texture2D">
            <summary>
            Class for texture handling.
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.AnimatedGifFrame.duration">
            <summary>
            Frame length the time dimension
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.ThirdPartyEmote">
            <summary>
            Base class for tired party emotes (not native Twitch emotes)
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.ThirdPartyEmote.Size">
            <summary>
            Size of the emote mapped to the url template value (1x 2x 3x)
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.ThirdPartyEmote.#ctor(System.String)">
            <summary>
            A emote id and position in message separated by colon
            </summary>
            <param name="data">A emote id and position in message separated by a slash</param>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.ResponseEmote">
            <summary>
            Base emote response expected from an emote request
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.ResponseEmote.id">
            <summary>
            Unique id for an emote, can be the emote text or a generated id
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.FFZ.FfzEmote">
            <summary>
            A emote id and position in message separated by colon
            ie. 300983834:0-9
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.FFZ.FfzEmote.API_BASE_URL">
            <summary>
            The base api url to make request for emote data
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.FFZ.FfzEmote.baseUrl">
            <summary>
            The base url for emote image data
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.FFZ.FfzEmote.regex">
            <summary>
            Matches for emote text within a chat message
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.FFZ.FfzEmote.isEnabled">
            <summary>
            FFZ emote urls fetched enabled
            <para>NOTE: Must be set before runtime</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.FFZ.FfzEmote.isReady">
            <summary>
            FFZ emote urls fetched
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.FFZ.FfzEmote.responseEmote">
            <summary>
            Emote response expected from an emote request
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.FFZ.FfzEmote.Selector(TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.ResponseEmote)">
            <summary>
            Gets the code or name of the emote a unique id
            </summary>
            <param name="x">The emote object</param>
            <returns>The code for the emote of an empty string if the type does not match</returns>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.FFZ.FfzEmote.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Create an emote and it's position in the chat message
            </summary>
            <param name="id">Emote name</param>
            <param name="first">First index in the chat message string</param>
            <param name="last">Last index in the chat message string</param>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.FFZ.FfzEmote.FetchEmotesAsync(System.String[])">
            <summary>
            Fetch emote data for specified channels
            </summary>
            <param name="channels">Chane names to lookup emotes</param>
            <returns>List if emote response expected from an emote request</returns>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.FFZ.FfzEmote.FetchEmotesEnumerator(System.String[])">
            <summary>
            Fetch emote data for specified channels
            </summary>
            <param name="channels">Chane names to lookup emotes</param>
            <returns>List if emote response expected from an emote request</returns>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.FFZ.FfzEmote.GetUrl(System.String)">
            <summary>
            <para>Use Emote.Size class to provide available sizes</para>
            <para>size is 1.0, 2.0 or 3.0</para>
            </summary>
            <param name="size">Value for the size of the emote to return</param>
            <returns>A url with the size replacement from the template</returns>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.FFZ.FfzEmote.GetUrl(TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.Sizes)">
            <summary>
            Get emote url based on the size
            </summary>
            <param name="sizes">Size to replace in the url template</param>
            <returns>A url with the size replacement from the template</returns>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.FFZ.FfzEmote.ParseFFZ(System.String,System.Collections.Generic.List{TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.ResponseEmote})">
            <summary>
            Match and parse emotes from chat message
            </summary>
            <param name="message">The chat message string to parse</param>
            <param name="responseEmotes">The list of possible emotes</param>
            <returns>Emotes found in the chat message</returns>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.FFZ.FfzResponse">
            <summary>
            The emote response expected from an emote request
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.FFZ.FfzResponse.emotes">
            <summary>
            Emote responses expected from an emote request
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.FFZ.FfzResponseEmote">
            <summary>
            Emote response expected from an emote request
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.FFZ.FfzResponseEmote.name">
            <summary>
            The emote name as seen in a chat message
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.FFZ.FfzResponseEmote.width">
            <summary>
            The width of the emote in pixels
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.FFZ.FfzResponseEmote.height">
            <summary>
            The height of the emote in pixels
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.FFZ.FfzResponseEmote.urls">
            <summary>
            Size of the emote mapped to the url template
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.EmoteItem">
            <summary>
            Emote item containing basic emote information
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.EmoteItem.messageEmote">
            <summary>
            A emote id and position in message separated by colon
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.EmoteItem.#ctor">
            <summary>
            Create an emote item
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.EmoteMessageArgs">
            <summary>
            Emotes parsed from message event
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.EmoteMessageArgs.emoteItems">
            <summary>
            Collection of emote items containing basic emote information
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.EmoteMessageArgs.#ctor(TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesArgs,TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.ComplexTags,System.Collections.Generic.List{TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.EmoteItem})">
            <summary>
            Create a new emote message object
            </summary>
            <param name="capabilitiesArgs">CapabilitiesArgs that occurred on the notice</param>
            <param name="complexTags">Properties associated with the notification</param>
            <param name="emoteItems">Collection of emote items containing basic emote information</param>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.BTTV.BttvResponseEmote">
            <summary>
            Emote response expected from an emote request
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.BTTV.BttvResponseEmote.channel">
            <summary>
            Channel name associated with the emote
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.BTTV.BttvResponseEmote.code">
            <summary>
            The emote code a unique id
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.BTTV.BttvResponseEmote.imageType">
            <summary>
            Image type png/gif
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.BTTV.BttvResponse">
            <summary>
            The emote response expected from an emote request
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.BTTV.BttvResponse.urlTemplate">
            <summary>
            The url temple for the emote (replace the code) to get image url
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.BTTV.BttvResponse.emotes">
            <summary>
            Emote responses expected from an emote request
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.BTTV.BttvEmote">
            <summary>
            A emote id and position in message separated by colon
            ie. 300983834:0-9
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.BTTV.BttvEmote.API_BASE_URL">
            <summary>
            The base api url to make request for emote data
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.BTTV.BttvEmote.baseUrl">
            <summary>
            The base url for emote image data
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.BTTV.BttvEmote.regex">
            <summary>
            Matches for emote text within a chat message
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.BTTV.BttvEmote.isEnabled">
            <summary>
            FFZ emote urls fetched enabled
            <para>NOTE: Must be set before runtime</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.BTTV.BttvEmote.isReady">
            <summary>
            FFZ emote urls fetched
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.BTTV.BttvEmote.Selector(TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.ResponseEmote)">
            <summary>
            Gets the code or name of the emote a unique id
            </summary>
            <param name="x">The emote object</param>
            <returns>The code for the emote of an empty string if the type does not match</returns>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.BTTV.BttvEmote.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Create an emote and it's position in the chat message
            </summary>
            <param name="id">Emote code</param>
            <param name="first">First index in the chat message string</param>
            <param name="last">Last index in the chat message string</param>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.BTTV.BttvEmote.FetchEmotesAsync(System.String[])">
            <summary>
            Fetch emote data for specified channels
            </summary>
            <param name="channels">Chane names to lookup emotes</param>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.BTTV.BttvEmote.FetchEmotesEnumerator(System.String[])">
            <summary>
            Fetch emote data for specified channels
            </summary>
            <param name="channels">Chane names to lookup emotes</param>
            <returns>List if emote response expected from an emote request</returns>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.BTTV.BttvEmote.ParseBTTV(System.String,System.Collections.Generic.List{TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.ResponseEmote})">
            <summary>
            Match and parse emotes from chat message
            </summary>
            <param name="message">The chat message string to parse</param>
            <param name="responseEmotes">The list of possible emotes</param>
            <returns>Emotes found in the chat message</returns>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.EmotesHandler">
            <summary>
            Emote texture and image handler
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.EmotesHandler.responseEmotes">
            <summary>
            Collection of all third party emotes
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.EmotesHandler.cachedAnimated">
            <summary>
            Cache to hold image textures on first load
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.EmotesHandler.InitOnJoin(TwitchUnityIRC.Channel.Notifications.RoomStateArgs)">
            <summary>
            Set up emote path and functionality
            </summary>
            <param name="obj">User joins a channel or a room setting is changed</param>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.EmotesHandler.GetEmote``1(TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.MessageEmote)">
            <summary>
            Download the emote image
            </summary>
            <typeparam name="T">EmoteItem type to use for casting</typeparam>
            <param name="messageEmote">A emote id and position in message separated by colon</param>
            <returns></returns>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.EmotesHandler.PngPath(System.String)">
            <summary>
            Get the application system path and full name of png from the emote id
            </summary>
            <param name="emoteId">Usually the name/code of the emote</param>
            <returns>A full path and filename with extension</returns>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.EmotesHandler.GifPath(System.String)">
            <summary>
            Get the application system path and full name of gif from the emote id
            </summary>
            <param name="emoteId">Usually the name/code of the emote</param>
            <returns>A full path and filename with extension</returns>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.EmotesHandler.GifFrames(TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.MessageEmote)">
            <summary>
            Creates a Texture2D list to represent each frame of the gif
            </summary>
            <param name="messageEmote">A emote id and position in message separated by colon</param>
            <returns></returns>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.Sizes">
            <summary>
            Size of the emote
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.Sizes.Small">
            <summary>
            size is 1.0
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.Sizes.Medium">
            <summary>
            size is 2.0
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.Sizes.Large">
            <summary>
            size is 3.0
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.Emote">
            <summary>
            A emote id
            300983834
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.Emote.Size">
            <summary>
            Size of the emote
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.Emote.baseUrl">
            <summary>
            The base url for emote image data
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.Emote.id">
            <summary>
            Emote id
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.Emote.bytes">
            <summary>
            Emote raw downloaded byte data
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.Emote.GetUrl(System.String,System.String,System.String)">
            <summary>
            <para>Use Emote.Size class to provide available sizes</para>
            <para>size is 1.0, 2.0 or 3.0</para>
            </summary>
            <param name="baseUrl">Base url</param>
            <param name="id">Emote id</param>
            <param name="size">Value for the size of the emote to return</param>
            <returns>A url with the size replacement from the template</returns>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.Emote.#ctor(System.String)">
            <summary>
            A emote id
            </summary>
            <param name="id">A emote id</param>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.Emote.GetUrl(System.String)">
            <summary>
            <para>Use Emote.Size class to provide available sizes</para>
            <para>size is 1.0, 2.0 or 3.0</para>
            </summary>
            <param name="size">Value for the size of the emote to return</param>
            <returns>A url with the size replacement from the template</returns>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.Emote.GetUrl(TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.Sizes)">
            <summary>
            <para>size is 1.0, 2.0 or 3.0</para>
            </summary>
            <param name="sizes">Value for the size of the emote to return</param>
            <returns>A url with the size replacement from the template</returns>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.MessageEmote">
            <summary>
            A emote id and position in message separated by colon
            ie. 300983834:0-9
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.MessageEmote.Size">
            <summary>
            Size references for the emotes, generally 3 sizes (1.0 2.0 3.0)
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.MessageEmote.baseUrl">
            <summary>
            The base url for emote image data
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.MessageEmote.first">
            <summary>
            First index of the emote in the message
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.MessageEmote.last">
            <summary>
            Last index of the emote in the message
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.MessageEmote.group">
            <summary>
            Other emotes of same type in the chat message data
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Emotes.MessageEmote.#ctor(System.String)">
            <summary>
            A emote id and position in message separated by colon
            </summary>
            <param name="data">A emote id and position in message separated by a slash</param>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PART.ComplexTags">
            <summary>
            IRC Tags as typed objects using custom types
            <para>https://dev.twitch.tv/docs/irc/tags</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PART.ComplexTags.propertyInfos">
            <summary>
            Use a static property infos to reduce reflections lookups
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PART.ComplexTags.#ctor">
            <summary>
            PART IRC Tags as typed objects using custom types
            <para>User parts the channel.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PART.ComplexTags.nick">
            <summary>
            channel
            <para>The username</para>
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PART.ComplexTags.Parse">
            <summary>
            Parse string tag into property name and value
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PART.PrimitiveTags">
            <summary>
            IRC Tags as key value set of strings using primitive types
            <para>https://dev.twitch.tv/docs/irc/tags</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PART.PrimitiveTags.propertyInfos">
            <summary>
            Use a static property infos to reduce reflections lookups
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PART.PrimitiveTags.#ctor">
            <summary>
            PART IRC Tags as key value set of strings using primitive types
            <para>User parts the channel.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PART.PrimitiveTags.nick">
            <summary>
            channel
            <para>The username</para>
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PART.PrimitiveTags.Parse">
            <summary>
            Parse string tag into property name and value
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PART.RawTags">
            <summary>
            IRC Tags strings
            <para>https://dev.twitch.tv/docs/irc/tags</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PART.RawTags.propertyInfos">
            <summary>
            Use a static property infos to reduce reflections lookups
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PART.RawTags.#ctor">
            <summary>
            PART IRC Tags strings
            <para>User parts the channel.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PART.RawTags.nick">
            <summary>
            channel
            <para>The username</para>
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PART.RawTags.Parse">
            <summary>
            Parse string tag into property name and value
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.JOIN.ComplexTags">
            <summary>
            IRC Tags as typed objects using custom types
            <para>https://dev.twitch.tv/docs/irc/tags</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.JOIN.ComplexTags.propertyInfos">
            <summary>
            Use a static property infos to reduce reflections lookups
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.JOIN.ComplexTags.#ctor">
            <summary>
            JOIN IRC Tags as typed objects using custom types
            <para>User joins the channel.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.JOIN.ComplexTags.nick">
            <summary>
            channel
            <para>The username</para>
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.JOIN.ComplexTags.Parse">
            <summary>
            Parse string tag into property name and value
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.JOIN.PrimitiveTags">
            <summary>
            IRC Tags as key value set of strings using primitive types
            <para>https://dev.twitch.tv/docs/irc/tags</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.JOIN.PrimitiveTags.propertyInfos">
            <summary>
            Use a static property infos to reduce reflections lookups
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.JOIN.PrimitiveTags.#ctor">
            <summary>
            JOIN IRC Tags as key value set of strings using primitive types
            <para>User joins the channel.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.JOIN.PrimitiveTags.nick">
            <summary>
            channel
            <para>The username</para>
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.JOIN.PrimitiveTags.Parse">
            <summary>
            Parse string tag into property name and value
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.JOIN.RawTags">
            <summary>
            IRC Tags strings
            <para>https://dev.twitch.tv/docs/irc/tags</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.JOIN.RawTags.propertyInfos">
            <summary>
            Use a static property infos to reduce reflections lookups
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.JOIN.RawTags.#ctor">
            <summary>
            JOIN IRC Tags strings
            <para>User joins the channel.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.JOIN.RawTags.nick">
            <summary>
            channel
            <para>The username</para>
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.JOIN.RawTags.Parse">
            <summary>
            Parse string tag into property name and value
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.HOSTTARGET.ComplexTags">
            <summary>
            IRC Tags as typed objects using custom types
            <para>https://dev.twitch.tv/docs/irc/tags</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.HOSTTARGET.ComplexTags.propertyInfos">
            <summary>
            Use a static property infos to reduce reflections lookups
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.HOSTTARGET.ComplexTags.#ctor">
            <summary>
            HOSTTARGET IRC Tags as typed objects using custom types
            <para>Channel is hosting auth channel</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.HOSTTARGET.ComplexTags.channel">
            <summary>
            channel
            <para>The channel name</para>
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.HOSTTARGET.ComplexTags.Parse">
            <summary>
            Parse string tag into property name and value
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.HOSTTARGET.PrimitiveTags">
            <summary>
            IRC Tags as key value set of strings using primitive types
            <para>https://dev.twitch.tv/docs/irc/tags</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.HOSTTARGET.PrimitiveTags.propertyInfos">
            <summary>
            Use a static property infos to reduce reflections lookups
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.HOSTTARGET.PrimitiveTags.#ctor">
            <summary>
            HOSTTARGET IRC Tags as key value set of strings using primitive types
            <para>Channel is hosting auth channel</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.HOSTTARGET.PrimitiveTags.channel">
            <summary>
            channel
            <para>The channel name</para>
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.HOSTTARGET.PrimitiveTags.Parse">
            <summary>
            Parse string tag into property name and value
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.HOSTTARGET.RawTags">
            <summary>
            IRC Tags strings
            <para>https://dev.twitch.tv/docs/irc/tags</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.HOSTTARGET.RawTags.propertyInfos">
            <summary>
            Use a static property infos to reduce reflections lookups
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.HOSTTARGET.RawTags.#ctor">
            <summary>
            HOSTTARGET IRC Tags strings
            <para>Channel is hosting auth channel</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.HOSTTARGET.RawTags.channel">
            <summary>
            channel
            <para>The channel name</para>
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.HOSTTARGET.RawTags.Parse">
            <summary>
            Parse string tag into property name and value
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARMSG.ComplexTags">
            <summary>
            IRC Tags as typed objects using custom types
            <para>Removes a single message from a channel. This is triggered by the /delete target-msg-id command on IRC.</para>
            <para>https://dev.twitch.tv/docs/irc/tags#clearchat-twitch-tags</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARMSG.ComplexTags.propertyInfos">
            <summary>
            Use a static property infos to reduce reflections lookups
            <para>Removes a single message from a channel. This is triggered by the /delete target-msg-id command on IRC.</para>
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARMSG.ComplexTags.#ctor">
            <summary>
            CLEARCHAT IRC Tags as typed objects using custom types
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARMSG.ComplexTags.login">
            <summary>
            login
            <para>Name of the user who sent the message.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARMSG.ComplexTags.message">
            <summary>
            message
            <para>The message.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARMSG.ComplexTags.roomId">
            <summary>
            room-id
            <para>The channel ID.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARMSG.ComplexTags.targetMsgId">
            <summary>
            target-msg-id
            <para>UUID of the message.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARMSG.ComplexTags.tmiSentTs">
            <summary>
            tmi-sent-ts
            <para>Timestamp when the server received the message.</para>
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARMSG.PrimitiveTags">
            <summary>
            IRC Tags as key value set of strings using primitive types
            <para>Removes a single message from a channel. This is triggered by the /delete target-msg-id command on IRC.</para>
            <para>https://dev.twitch.tv/docs/irc/tags#clearchat-twitch-tags</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARMSG.PrimitiveTags.propertyInfos">
            <summary>
            Use a static property infos to reduce reflections lookups
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARMSG.PrimitiveTags.#ctor">
            <summary>
            CLEARCHAT IRC Tags as key value set of strings using primitive types
            <para>Removes a single message from a channel. This is triggered by the /delete target-msg-id command on IRC.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARMSG.PrimitiveTags.login">
            <summary>
            login
            <para>Name of the user who sent the message.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARMSG.PrimitiveTags.message">
            <summary>
            message
            <para>The message.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARMSG.PrimitiveTags.roomId">
            <summary>
            room-id
            <para>The channel ID.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARMSG.PrimitiveTags.targetMsgId">
            <summary>
            target-msg-id
            <para>UUID of the message.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARMSG.PrimitiveTags.tmiSentTs">
            <summary>
            tmi-sent-ts
            <para>Timestamp when the server received the message.</para>
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARMSG.RawTags">
            <summary>
            IRC Tags strings
            <para>Removes a single message from a channel. This is triggered by the /delete target-msg-id command on IRC.</para>
            <para>https://dev.twitch.tv/docs/irc/tags#clearmsg-twitch-tags</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARMSG.RawTags.propertyInfos">
            <summary>
            Use a static property infos to reduce reflections lookups
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARMSG.RawTags.#ctor">
            <summary>
            CLEARMSG IRC Tags strings
            <para>Removes a single message from a channel. This is triggered by the /delete target-msg-id command on IRC.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARMSG.RawTags.login">
            <summary>
            login
            <para>Name of the user who sent the message.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARMSG.RawTags.message">
            <summary>
            message
            <para>The message.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARMSG.RawTags.roomId">
            <summary>
            room-id
            <para>The channel ID.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARMSG.RawTags.targetMsgId">
            <summary>
            target-msg-id
            <para>UUID of the message.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARMSG.RawTags.tmiSentTs">
            <summary>
            tmi-sent-ts
            <para>Timestamp when the server received the message.</para>
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ComplexTags">
            <summary>
            IRC Tags as typed objects using custom types
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ComplexTags.propertyInfos">
            <summary>
            Use a static property infos to reduce reflections lookups
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ComplexTags.#ctor">
            <summary>
            IRC Tags as typed objects using custom types
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ComplexTags.Parse">
            <summary>
            Parse string tag into property name and value
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PrimitiveTags">
            <summary>
            IRC Tags as key value set of strings using primitive types
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PrimitiveTags.propertyInfos">
            <summary>
            Use a static property infos to reduce reflections lookups
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PrimitiveTags.#ctor">
            <summary>
            IRC Tags as key value set of strings using primitive types
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PrimitiveTags.Parse">
            <summary>
            Parse string tag into property name and value
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.EmptyTags">
            <summary>
            Empty Tags
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.EmptyTags.Empty">
            <summary>
            Empty Tags
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.EmptyTags.propertyInfos">
            <summary>
            Use a static property infos to reduce reflections lookups
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags">
            <summary>
            IRC Tags as typed objects using custom types
            <para>Sends a notice to the user when any of the following examples events occurs: Subscription, Incoming raid, Channel ritual.</para>
            <para>https://dev.twitch.tv/docs/irc/tags/#usernotice-twitch-tags</para>
            <para>Several other, msg-param fields are sent only for some notices; e.g., sub/resub.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.propertyInfos">
            <summary>
            Use a static property infos to reduce reflections lookups
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.#ctor">
            <summary>
            USERNOTICE IRC Tags as typed objects using custom types
            <para>Sends a notice to the user when any of the following examples events occurs: Subscription, Incoming raid, Channel ritual.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.badgeInfo">
            <summary>
            badge-info
            <para>Meta-data related to the chat badges in the badges tag.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.badges">
            <summary>
            badges
            <para>Comma-separated list of chat badges and the version of each badge.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.color">
            <summary>
            color
            <para>Hexadecimal RGB color code; the empty string if it is never set.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.displayName">
            <summary>
            display-name
            <para>The user’s display name, escaped as described in the IRCv3 spec. This is empty if it is never set.</para>
            <para>The IRCv3 spec - https://ircv3.net/specs/extensions/message-tags.html </para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.emotes">
            <summary>
            emotes
            <para>Information to replace text in the message with emote images.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.id">
            <summary>
            id
            <para>A unique ID for the message.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.login">
            <summary>
            login
            <para>The name of the user who sent the notice.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.message">
            <summary>
            message
            <para>The message. This is omitted if the user did not enter a message.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.mod">
            <summary>
            mod
            <para>1 if the user has a moderator badge; otherwise, 0.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.msgId">
            <summary>
            msg-id
            <para>The type of notice (not the ID). ie. sub, resub, raid, unraid</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.roomId">
            <summary>
            room-id
            <para>The channel ID.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.subscriber">
            <summary>
            subscriber
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.systemMsg">
            <summary>
            system-msg
            <para>The message printed in chat along with this notice.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.tmiSentTs">
            <summary>
            tmi-sent-ts
            <para>Timestamp when the server received the message.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.turbo">
            <summary>
            turbo
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.userId">
            <summary>
            user-id
            <para>The user’s ID.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.userType">
            <summary>
            user-type
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.msgParamCumulativeMonth">
            <summary>
            msg-param-cumulative-month
            <para>(Sent only on sub, resub) The total number of months the user has subscribed.</para>
            <para>This is the same as msg-param-months but sent for different types of user notices.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.msgParamDisplayName">
            <summary>
            msg-param-displayName
            <para>(Sent only on raid) The display name of the source user raiding this channel.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.msgParamLogin">
            <summary>
            msg-param-login
            <para>(Sent on only raid) The name of the source user raiding this channel.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.msgParamMonths">
            <summary>
            msg-param-months
            <para>(Sent only on subgift, anonsubgift) The total number of months the user has subscribed.</para>
            <para>This is the same as msg-param-cumulative-months but sent for different types of user notices.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.msgParamPromoGiftTotal">
            <summary>
            msg-param-promo-gift-total
            <para>(Sent only on anongiftpaidupgrade, giftpaidupgrade) 
            The number of gifts the user has given during the promo indicated by msg-param-promo-name.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.msgParamPromoName">
            <summary>
            msg-param-promo-name
            <para>(Sent only on anongiftpaidupgrade, giftpaidupgrade) The subscriptions promo, if any, that is ongoing.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.msgParamRecipientDisplayName">
            <summary>
            msg-param-recipient-display-name
            <para>(Sent only on subgift, anonsubgift) The display name of the subscription gift recipient.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.msgParamRecipientId">
            <summary>
            msg-param-recipient-id
            <para>(Sent only on subgift, anonsubgift) The user ID of the subscription gift recipient.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.msgParamRecipientUserName">
            <summary>
            msg-param-recipient-user-name
            <para>(Sent only on subgift, anonsubgift) The user name of the subscription gift recipient.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.msgParamSenderLogin">
            <summary>
            msg-param-sender-login
            <para>(Sent only on giftpaidupgrade) The login of the user who gifted the subscription.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.msgParamSenderName">
            <summary>
            msg-param-sender-name
            <para>(Sent only on giftpaidupgrade) The display name of the user who gifted the subscription.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.msgParamShouldShareStreak">
            <summary>
            msg-param-should-share-streak
            <para>(Sent only on sub, resub) Boolean indicating whether users want their streaks to be shared.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.msgParamStreakMonths">
            <summary>
            msg-param-streak-months
            <para>(Sent only on sub, resub) The number of consecutive months the user has subscribed.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.msgParamSubPlan">
            <summary>
            msg-param-sub-plan
            <para>(Sent only on sub, resub, subgift, anonsubgift) The type of subscription plan being used.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.msgParamSubPlanName">
            <summary>
            msg-param-sub-plan-name
            <para>(Sent only on sub, resub, subgift, anonsubgift) The display name of the subscription plan.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.msgParamViewerCount">
            <summary>
            msg-param-viewerCount
            <para>(Sent only on raid) The number of viewers watching the source channel raiding this channel.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.msgParamRitualName">
            <summary>
            msg-param-ritual-name
            <para>(Sent only on ritual) The name of the ritual this notice is for.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.msgParamThreshold">
            <summary>
            msg-param-threshold
            <para>(Sent only on bitsbadgetier) The tier of the bits badge the user just earned.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags.msgParamsGiftMonths">
            <summary>
            msg-params-gift-months
            <para>(Sent only on subgift, anonsubgift) Number of months gifted as part of a single, multi-month gift.</para>
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags">
            <summary>
            IRC Tags as key value set of strings using primitive types
            <para>Sends a notice to the user when any of the following examples events occurs: Subscription, Incoming raid, Channel ritual.</para>
            <para>https://dev.twitch.tv/docs/irc/tags/#usernotice-twitch-tags</para>
            <para>Several other, msg-param fields are sent only for some notices; e.g., sub/resub.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.propertyInfos">
            <summary>
            Use a static property infos to reduce reflections lookups
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.#ctor">
            <summary>
            USERNOTICE IRC Tags as key value set of strings using primitive types
            <para>Sends a notice to the user when any of the following examples events occurs: Subscription, Incoming raid, Channel ritual.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.badgeInfo">
            <summary>
            badge-info
            <para>Meta-data related to the chat badges in the badges tag.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.badges">
            <summary>
            badges
            <para>Comma-separated list of chat badges and the version of each badge.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.color">
            <summary>
            color
            <para>Hexadecimal RGB color code; the empty string if it is never set.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.displayName">
            <summary>
            display-name
            <para>The user’s display name, escaped as described in the IRCv3 spec. This is empty if it is never set.</para>
            <para>The IRCv3 spec - https://ircv3.net/specs/extensions/message-tags.html </para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.emotes">
            <summary>
            emotes
            <para>Information to replace text in the message with emote images.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.id">
            <summary>
            id
            <para>A unique ID for the message.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.login">
            <summary>
            login
            <para>The name of the user who sent the notice.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.message">
            <summary>
            message
            <para>The message. This is omitted if the user did not enter a message.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.mod">
            <summary>
            mod
            <para>1 if the user has a moderator badge; otherwise, 0.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.msgId">
            <summary>
            msg-id
            <para>The type of notice (not the ID). ie. sub, resub, raid, unraid</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.roomId">
            <summary>
            room-id
            <para>The channel ID.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.subscriber">
            <summary>
            subscriber
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.systemMsg">
            <summary>
            system-msg
            <para>The message printed in chat along with this notice.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.tmiSentTs">
            <summary>
            tmi-sent-ts
            <para>Timestamp when the server received the message.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.turbo">
            <summary>
            turbo
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.userId">
            <summary>
            user-id
            <para>The user’s ID.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.userType">
            <summary>
            user-type
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.msgParamCumulativeMonth">
            <summary>
            msg-param-cumulative-month
            <para>(Sent only on sub, resub) The total number of months the user has subscribed.</para>
            <para>This is the same as msg-param-months but sent for different types of user notices.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.msgParamDisplayName">
            <summary>
            msg-param-displayName
            <para>(Sent only on raid) The display name of the source user raiding this channel.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.msgParamLogin">
            <summary>
            msg-param-login
            <para>(Sent on only raid) The name of the source user raiding this channel.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.msgParamMonths">
            <summary>
            msg-param-months
            <para>(Sent only on subgift, anonsubgift) The total number of months the user has subscribed.</para>
            <para>This is the same as msg-param-cumulative-months but sent for different types of user notices.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.msgParamPromoGiftTotal">
            <summary>
            msg-param-promo-gift-total
            <para>(Sent only on anongiftpaidupgrade, giftpaidupgrade) 
            The number of gifts the user has given during the promo indicated by msg-param-promo-name.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.msgParamPromoName">
            <summary>
            msg-param-promo-name
            <para>(Sent only on anongiftpaidupgrade, giftpaidupgrade) The subscriptions promo, if any, that is ongoing.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.msgParamRecipientDisplayName">
            <summary>
            msg-param-recipient-display-name
            <para>(Sent only on subgift, anonsubgift) The display name of the subscription gift recipient.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.msgParamRecipientId">
            <summary>
            msg-param-recipient-id
            <para>(Sent only on subgift, anonsubgift) The user ID of the subscription gift recipient.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.msgParamRecipientUserName">
            <summary>
            msg-param-recipient-user-name
            <para>(Sent only on subgift, anonsubgift) The user name of the subscription gift recipient.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.msgParamSenderLogin">
            <summary>
            msg-param-sender-login
            <para>(Sent only on giftpaidupgrade) The login of the user who gifted the subscription.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.msgParamSenderName">
            <summary>
            msg-param-sender-name
            <para>(Sent only on giftpaidupgrade) The display name of the user who gifted the subscription.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.msgParamShouldShareStreak">
            <summary>
            msg-param-should-share-streak
            <para>(Sent only on sub, resub) Boolean indicating whether users want their streaks to be shared.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.msgParamStreakMonths">
            <summary>
            msg-param-streak-months
            <para>(Sent only on sub, resub) The number of consecutive months the user has subscribed.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.msgParamSubPlan">
            <summary>
            msg-param-sub-plan
            <para>(Sent only on sub, resub, subgift, anonsubgift) The type of subscription plan being used.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.msgParamSubPlanName">
            <summary>
            msg-param-sub-plan-name
            <para>(Sent only on sub, resub, subgift, anonsubgift) The display name of the subscription plan.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.msgParamViewerCount">
            <summary>
            msg-param-viewerCount
            <para>(Sent only on raid) The number of viewers watching the source channel raiding this channel.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.msgParamRitualName">
            <summary>
            msg-param-ritual-name
            <para>(Sent only on ritual) The name of the ritual this notice is for.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.msgParamThreshold">
            <summary>
            msg-param-threshold
            <para>(Sent only on bitsbadgetier) The tier of the bits badge the user just earned.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.PrimitiveTags.msgParamsGiftMonths">
            <summary>
            msg-params-gift-months
            <para>(Sent only on subgift, anonsubgift) Number of months gifted as part of a single, multi-month gift.</para>
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags">
            <summary>
            IRC Tags strings
            <para>Sends a notice to the user when any of the following examples events occurs: Subscription, Incoming raid, Channel ritual.</para>
            <para>https://dev.twitch.tv/docs/irc/tags/#usernotice-twitch-tags</para>
            <para>Several other, msg-param fields are sent only for some notices; e.g., sub/resub.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.propertyInfos">
            <summary>
            Use a static property infos to reduce reflections lookups
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.#ctor">
            <summary>
            USERNOTICE IRC Tags strings
            <para>Sends a notice to the user when any of the following examples events occurs: Subscription, Incoming raid, Channel ritual.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.badgeInfo">
            <summary>
            badge-info
            <para>Meta-data related to the chat badges in the badges tag.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.badges">
            <summary>
            badges
            <para>Comma-separated list of chat badges and the version of each badge.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.color">
            <summary>
            color 
            <para>Hexadecimal RGB color code; the empty string if it is never set.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.displayName">
            <summary>
            display-name
            <para>The user’s display name, escaped as described in the IRCv3 spec. This is empty if it is never set.</para>
            <para>The IRCv3 spec - https://ircv3.net/specs/extensions/message-tags.html </para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.emotes">
            <summary>
            emotes
            <para>Information to replace text in the message with emote images.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.id">
            <summary>
            id
            <para>A unique ID for the message.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.login">
            <summary>
            login
            <para>The name of the user who sent the notice.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.message">
            <summary>
            message
            <para>The message. This is omitted if the user did not enter a message.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.mod">
            <summary>
            mod
            <para>1 if the user has a moderator badge; otherwise, 0.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.msgId">
            <summary>
            msg-id
            <para>The type of notice (not the ID). ie. sub, resub, raid, unraid</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.roomId">
            <summary>
            room-id
            <para>The channel ID.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.subscriber">
            <summary>
            subscriber
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.systemMsg">
            <summary>
            system-msg
            <para>The message printed in chat along with this notice.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.tmiSentTs">
            <summary>
            tmi-sent-ts
            <para>Timestamp when the server received the message.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.turbo">
            <summary>
            turbo
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.userId">
            <summary>
            user-id
            <para>The user’s ID.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.userType">
            <summary>
            user-type
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.msgParamCumulativeMonth">
            <summary>
            msg-param-cumulative-month
            <para>(Sent only on sub, resub) The total number of months the user has subscribed.</para>
            <para>This is the same as msg-param-months but sent for different types of user notices.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.msgParamDisplayName">
            <summary>
            msg-param-displayName
            <para>(Sent only on raid) The display name of the source user raiding this channel.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.msgParamLogin">
            <summary>
            msg-param-login
            <para>(Sent on only raid) The name of the source user raiding this channel.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.msgParamMonths">
            <summary>
            msg-param-months
            <para>(Sent only on subgift, anonsubgift) The total number of months the user has subscribed.</para>
            <para>This is the same as msg-param-cumulative-months but sent for different types of user notices.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.msgParamPromoGiftTotal">
            <summary>
            msg-param-promo-gift-total
            <para>(Sent only on anongiftpaidupgrade, giftpaidupgrade) 
            The number of gifts the user has given during the promo indicated by msg-param-promo-name.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.msgParamPromoName">
            <summary>
            msg-param-promo-name
            <para>(Sent only on anongiftpaidupgrade, giftpaidupgrade) The subscriptions promo, if any, that is ongoing.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.msgParamRecipientDisplayName">
            <summary>
            msg-param-recipient-display-name
            <para>(Sent only on subgift, anonsubgift) The display name of the subscription gift recipient.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.msgParamRecipientId">
            <summary>
            msg-param-recipient-id
            <para>(Sent only on subgift, anonsubgift) The user ID of the subscription gift recipient.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.msgParamRecipientUserName">
            <summary>
            msg-param-recipient-user-name
            <para>(Sent only on subgift, anonsubgift) The user name of the subscription gift recipient.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.msgParamSenderLogin">
            <summary>
            msg-param-sender-login
            <para>(Sent only on giftpaidupgrade) The login of the user who gifted the subscription.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.msgParamSenderName">
            <summary>
            msg-param-sender-name
            <para>(Sent only on giftpaidupgrade) The display name of the user who gifted the subscription.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.msgParamShouldShareStreak">
            <summary>
            msg-param-should-share-streak
            <para>(Sent only on sub, resub) Boolean indicating whether users want their streaks to be shared.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.msgParamStreakMonths">
            <summary>
            msg-param-streak-months
            <para>(Sent only on sub, resub) The number of consecutive months the user has subscribed.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.msgParamSubPlan">
            <summary>
            msg-param-sub-plan
            <para>(Sent only on sub, resub, subgift, anonsubgift) The type of subscription plan being used.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.msgParamSubPlanName">
            <summary>
            msg-param-sub-plan-name
            <para>(Sent only on sub, resub, subgift, anonsubgift) The display name of the subscription plan.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.msgParamViewerCount">
            <summary>
            msg-param-viewerCount
            <para>(Sent only on raid) The number of viewers watching the source channel raiding this channel.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.msgParamRitualName">
            <summary>
            msg-param-ritual-name
            <para>(Sent only on ritual) The name of the ritual this notice is for.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.msgParamThreshold">
            <summary>
            msg-param-threshold
            <para>(Sent only on bitsbadgetier) The tier of the bits badge the user just earned.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.RawTags.msgParamsGiftMonths">
            <summary>
            msg-params-gift-months
            <para>(Sent only on subgift, anonsubgift) Number of months gifted as part of a single, multi-month gift.</para>
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.RawTags">
            <summary>
            IRC Tags strings
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.RawTags.propertyInfos">
            <summary>
            Use a static property infos to reduce reflections lookups
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.RawTags.#ctor">
            <summary>
            IRC Tags strings
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.RawTags.Parse">
            <summary>
            Parse string tag into property name and value
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.ComplexTags">
            <summary>
            IRC Tags as typed objects using custom types
            <para>https://dev.twitch.tv/docs/irc/tags#userstate-twitch-tags</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.ComplexTags.propertyInfos">
            <summary>
            Use a static property infos to reduce reflections lookups
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.ComplexTags.#ctor">
            <summary>
            USERSTATE IRC Tags as typed objects using custom types
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.ComplexTags.badgeInfo">
            <summary>
            badge-info
            <para>Meta-data related to the chat badges in the badges tag.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.ComplexTags.badges">
            <summary>
            badges
            <para>Comma-separated list of chat badges and the version of each badge.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.ComplexTags.color">
            <summary>
            color
            <para>Hexadecimal RGB color code; the empty string if it is never set.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.ComplexTags.displayName">
            <summary>
            display-name
            <para>The user’s display name, escaped as described in the IRCv3 spec. This is empty if it is never set.</para>
            <para>The IRCv3 spec - https://ircv3.net/specs/extensions/message-tags.html </para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.ComplexTags.emoteSets">
            <summary>
            emote-sets
            <para>A comma-separated list of emotes, belonging to one or more emote sets.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.ComplexTags.mod">
            <summary>
            mod
            <para>1 if the user has a moderator badge; otherwise, 0.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.ComplexTags.subscriber">
            <summary>
            subscriber
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.ComplexTags.turbo">
            <summary>
            turbo
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.ComplexTags.userType">
            <summary>
            user-type
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.PrimitiveTags">
            <summary>
            IRC Tags as key value set of strings using primitive types
            <para>https://dev.twitch.tv/docs/irc/tags#userstate-twitch-tags</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.PrimitiveTags.propertyInfos">
            <summary>
            Use a static property infos to reduce reflections lookups
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.PrimitiveTags.#ctor">
            <summary>
            USERSTATE IRC Tags as key value set of strings using primitive types
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.PrimitiveTags.badgeInfo">
            <summary>
            badge-info
            <para>Meta-data related to the chat badges in the badges tag.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.PrimitiveTags.badges">
            <summary>
            badges
            <para>Comma-separated list of chat badges and the version of each badge.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.PrimitiveTags.color">
            <summary>
            color
            <para>Hexadecimal RGB color code; the empty string if it is never set.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.PrimitiveTags.displayName">
            <summary>
            display-name
            <para>The user’s display name, escaped as described in the IRCv3 spec. This is empty if it is never set.</para>
            <para>The IRCv3 spec - https://ircv3.net/specs/extensions/message-tags.html </para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.PrimitiveTags.emoteSets">
            <summary>
            emote-sets
            <para>A comma-separated list of emotes, belonging to one or more emote sets.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.PrimitiveTags.mod">
            <summary>
            mod
            <para>1 if the user has a moderator badge; otherwise, 0.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.PrimitiveTags.subscriber">
            <summary>
            subscriber
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.PrimitiveTags.turbo">
            <summary>
            turbo
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.PrimitiveTags.userType">
            <summary>
            user-type
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.RawTags">
            <summary>
            IRC Tags strings
            <para>https://dev.twitch.tv/docs/irc/tags#userstate-twitch-tags</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.RawTags.propertyInfos">
            <summary>
            Use a static property infos to reduce reflections lookups
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.RawTags.#ctor">
            <summary>
            USERSTATE IRC Tags strings
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.RawTags.badgeInfo">
            <summary>
            badge-info
            <para>Meta-data related to the chat badges in the badges tag.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.RawTags.badges">
            <summary>
            badges
            <para>Comma-separated list of chat badges and the version of each badge.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.RawTags.color">
            <summary>
            color
            <para>Hexadecimal RGB color code; the empty string if it is never set.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.RawTags.displayName">
            <summary>
            display-name
            <para>The user’s display name, escaped as described in the IRCv3 spec. This is empty if it is never set.</para>
            <para>The IRCv3 spec - https://ircv3.net/specs/extensions/message-tags.html </para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.RawTags.emoteSets">
            <summary>
            emote-sets
            <para>A comma-separated list of emotes, belonging to one or more emote sets.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.RawTags.mod">
            <summary>
            mod
            <para>1 if the user has a moderator badge; otherwise, 0.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.RawTags.subscriber">
            <summary>
            subscriber
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.RawTags.turbo">
            <summary>
            turbo
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.RawTags.userType">
            <summary>
            user-type
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ROOMSTATE.ComplexTags">
            <summary>
            IRC Tags as typed objects using custom types
            <para>Sends room-state data when a user joins a channel or a room setting is changed.</para>
            <para>https://dev.twitch.tv/docs/irc/tags#roomstate-twitch-tags</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ROOMSTATE.ComplexTags.propertyInfos">
            <summary>
            Use a static property infos to reduce reflections lookups
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ROOMSTATE.ComplexTags.#ctor">
            <summary>
            ROOMSTATE IRC Tags as typed objects using custom types
            <para>Sends room-state data when a user joins a channel or a room setting is changed.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ROOMSTATE.ComplexTags.emoteOnly">
            <summary>
            emote-only
            <para>Emote-only mode. If enabled, only emotes are allowed in chat.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ROOMSTATE.ComplexTags.followersOnly">
            <summary>
            followers-only
            <para>Followers-only mode. If enabled, controls which followers can chat.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ROOMSTATE.ComplexTags.r9k">
            <summary>
            r9k
            <para>R9K mode. If enabled, messages with more than 9 characters must be unique.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ROOMSTATE.ComplexTags.rituals">
            <summary>
            rituals
            <para>Celebrate viewer milestones when they are shared.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ROOMSTATE.ComplexTags.roomId">
            <summary>
            room-id
            <para>The channel ID.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ROOMSTATE.ComplexTags.slow">
            <summary>
            slow
            <para>The number of seconds a chatter without moderator privileges must wait between sending messages.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ROOMSTATE.ComplexTags.subsOnly">
            <summary>
            subs-only
            <para>Subscribers-only mode. If enabled, only subscribers and moderators can chat.</para>
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ROOMSTATE.PrimitiveTags">
            <summary>
            IRC Tags as key value set of strings using primitive types
            <para>Sends room-state data when a user joins a channel or a room setting is changed.</para>
            <para>https://dev.twitch.tv/docs/irc/tags#roomstate-twitch-tags</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ROOMSTATE.PrimitiveTags.propertyInfos">
            <summary>
            Use a static property infos to reduce reflections lookups
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ROOMSTATE.PrimitiveTags.#ctor">
            <summary>
            ROOMSTATE IRC Tags as key value set of strings using primitive types
            <para>Sends room-state data when a user joins a channel or a room setting is changed.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ROOMSTATE.PrimitiveTags.emoteOnly">
            <summary>
            emote-only
            <para>Emote-only mode. If enabled, only emotes are allowed in chat.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ROOMSTATE.PrimitiveTags.followersOnly">
            <summary>
            followers-only
            <para>Followers-only mode. If enabled, controls which followers can chat.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ROOMSTATE.PrimitiveTags.r9k">
            <summary>
            r9k
            <para>R9K mode. If enabled, messages with more than 9 characters must be unique.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ROOMSTATE.PrimitiveTags.rituals">
            <summary>
            rituals
            <para>Celebrate viewer milestones when they are shared.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ROOMSTATE.PrimitiveTags.roomId">
            <summary>
            room-id
            <para>The channel ID.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ROOMSTATE.PrimitiveTags.slow">
            <summary>
            slow
            <para>The number of seconds a chatter without moderator privileges must wait between sending messages.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ROOMSTATE.PrimitiveTags.subsOnly">
            <summary>
            subs-only
            <para>Subscribers-only mode. If enabled, only subscribers and moderators can chat.</para>
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ROOMSTATE.RawTags">
            <summary>
            IRC Tags strings
            <para>Sends room-state data when a user joins a channel or a room setting is changed.</para>
            <para>https://dev.twitch.tv/docs/irc/tags#roomstate-twitch-tags</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ROOMSTATE.RawTags.propertyInfos">
            <summary>
            Use a static property infos to reduce reflections lookups
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ROOMSTATE.RawTags.#ctor">
            <summary>
            ROOMSTATE IRC Tags strings
            <para>Sends room-state data when a user joins a channel or a room setting is changed.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ROOMSTATE.RawTags.emoteOnly">
            <summary>
            emote-only
            <para>Emote-only mode. If enabled, only emotes are allowed in chat.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ROOMSTATE.RawTags.followersOnly">
            <summary>
            followers-only
            <para>Followers-only mode. If enabled, controls which followers can chat.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ROOMSTATE.RawTags.r9k">
            <summary>
            r9k
            <para>R9K mode. If enabled, messages with more than 9 characters must be unique.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ROOMSTATE.RawTags.rituals">
            <summary>
            rituals
            <para>Celebrate viewer milestones when they are shared.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ROOMSTATE.RawTags.roomId">
            <summary>
            room-id
            <para>The channel ID.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ROOMSTATE.RawTags.slow">
            <summary>
            slow
            <para>The number of seconds a chatter without moderator privileges must wait between sending messages.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ROOMSTATE.RawTags.subsOnly">
            <summary>
            subs-only
            <para>Subscribers-only mode. If enabled, only subscribers and moderators can chat.</para>
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARCHAT.ComplexTags">
            <summary>
            IRC Tags as typed objects using custom types
            <para>Purges all chat messages in a channel, or purges chat messages from a specific user (typically after a timeout or ban).</para>
            <para>https://dev.twitch.tv/docs/irc/tags#clearchat-twitch-tags</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARCHAT.ComplexTags.propertyInfos">
            <summary>
            Use a static property infos to reduce reflections lookups
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARCHAT.ComplexTags.#ctor">
            <summary>
            CLEARCHAT IRC Tags as typed objects using custom types
            <para>Purges all chat messages in a channel, or purges chat messages from a specific user (typically after a timeout or ban).</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARCHAT.ComplexTags.banDuration">
            <summary>
            ban-duration
            <para>(Optional) Duration of the timeout, in seconds. If omitted, the ban is permanent.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARCHAT.ComplexTags.roomId">
            <summary>
            room-id
            <para>The channel ID.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARCHAT.ComplexTags.targetUserId">
            <summary>
            target-user-id
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARCHAT.ComplexTags.tmiSentTs">
            <summary>
            tmi-sent-ts
            <para>Timestamp when the server received the message.</para>
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARCHAT.PrimitiveTags">
            <summary>
            IRC Tags as key value set of strings using primitive types
            <para>Purges all chat messages in a channel, or purges chat messages from a specific user (typically after a timeout or ban).</para>
            <para>https://dev.twitch.tv/docs/irc/tags#clearchat-twitch-tags</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARCHAT.PrimitiveTags.propertyInfos">
            <summary>
            Use a static property infos to reduce reflections lookups
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARCHAT.PrimitiveTags.#ctor">
            <summary>
            CLEARCHAT IRC Tags as key value set of strings using primitive types
            <para>Purges all chat messages in a channel, or purges chat messages from a specific user (typically after a timeout or ban).</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARCHAT.PrimitiveTags.banDuration">
            <summary>
            ban-duration
            <para>(Optional) Duration of the timeout, in seconds. If omitted, the ban is permanent.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARCHAT.PrimitiveTags.roomId">
            <summary>
            room-id
            <para>The channel ID.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARCHAT.PrimitiveTags.targetUserId">
            <summary>
            target-user-id
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARCHAT.PrimitiveTags.tmiSentTs">
            <summary>
            tmi-sent-ts
            <para>Timestamp when the server received the message.</para>
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARCHAT.RawTags">
            <summary>
            IRC Tags strings
            <para>Purges all chat messages in a channel, or purges chat messages from a specific user (typically after a timeout or ban).</para>
            <para>https://dev.twitch.tv/docs/irc/tags#clearchat-twitch-tags</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARCHAT.RawTags.propertyInfos">
            <summary>
            Use a static property infos to reduce reflections lookups
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARCHAT.RawTags.#ctor">
            <summary>
            CLEARCHAT IRC Tags strings
            <para>Purges all chat messages in a channel, or purges chat messages from a specific user (typically after a timeout or ban).</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARCHAT.RawTags.banDuration">
            <summary>
            ban-duration
            <para>(Optional) Duration of the timeout, in seconds. If omitted, the ban is permanent.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARCHAT.RawTags.roomId">
            <summary>
            room-id
            <para>The channel ID.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARCHAT.RawTags.targetUserId">
            <summary>
            target-user-id
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARCHAT.RawTags.tmiSentTs">
            <summary>
            tmi-sent-ts
            <para>Timestamp when the server received the message.</para>
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.GLOBALUSERSTATE.ComplexTags">
            <summary>
            IRC Tags as typed objects using custom types
            <para>On successful login, provides data about the current logged-in user through IRC tags. It is sent after successfully authenticating (sending a PASS/NICK command).</para>
            <para>https://dev.twitch.tv/docs/irc/tags#globaluserstate-twitch-tags</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.GLOBALUSERSTATE.ComplexTags.propertyInfos">
            <summary>
            Use a static property infos to reduce reflections lookups
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.GLOBALUSERSTATE.ComplexTags.#ctor">
            <summary>
            GLOBALUSERSTATE IRC Tags as typed objects using custom types
            <para>On successful login, provides data about the current logged-in user through IRC tags. It is sent after successfully authenticating (sending a PASS/NICK command).</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.GLOBALUSERSTATE.ComplexTags.badgeInfo">
            <summary>
            badge-info
            <para>Meta-data related to the chat badges in the badges tag.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.GLOBALUSERSTATE.ComplexTags.badges">
            <summary>
            badges
            <para>Comma-separated list of chat badges and the version of each badge.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.GLOBALUSERSTATE.ComplexTags.color">
            <summary>
            color
            <para>Hexadecimal RGB color code; the empty string if it is never set.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.GLOBALUSERSTATE.ComplexTags.displayName">
            <summary>
            display-name
            <para>The user’s display name, escaped as described in the IRCv3 spec. This is empty if it is never set.</para>
            <para>The IRCv3 spec - https://ircv3.net/specs/extensions/message-tags.html </para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.GLOBALUSERSTATE.ComplexTags.emoteSets">
            <summary>
            emote-sets
            <para>A comma-separated list of emotes, belonging to one or more emote sets.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.GLOBALUSERSTATE.ComplexTags.turbo">
            <summary>
            turbo
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.GLOBALUSERSTATE.ComplexTags.userId">
            <summary>
            user-id
            <para>The user’s ID.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.GLOBALUSERSTATE.ComplexTags.userType">
            <summary>
            user-type
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.GLOBALUSERSTATE.PrimitiveTags">
            <summary>
            IRC Tags as key value set of strings using primitive types
            <para>On successful login, provides data about the current logged-in user through IRC tags. It is sent after successfully authenticating (sending a PASS/NICK command).</para>
            <para>https://dev.twitch.tv/docs/irc/tags#globaluserstate-twitch-tags</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.GLOBALUSERSTATE.PrimitiveTags.propertyInfos">
            <summary>
            Use a static property infos to reduce reflections lookups
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.GLOBALUSERSTATE.PrimitiveTags.#ctor">
            <summary>
            GLOBALUSERSTATE IRC Tags as key value set of strings using primitive types
            <para>On successful login, provides data about the current logged-in user through IRC tags. It is sent after successfully authenticating (sending a PASS/NICK command).</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.GLOBALUSERSTATE.PrimitiveTags.badgeInfo">
            <summary>
            badge-info
            <para>Meta-data related to the chat badges in the badges tag.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.GLOBALUSERSTATE.PrimitiveTags.badges">
            <summary>
            badges
            <para>Comma-separated list of chat badges and the version of each badge.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.GLOBALUSERSTATE.PrimitiveTags.color">
            <summary>
            color
            <para>Hexadecimal RGB color code; the empty string if it is never set.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.GLOBALUSERSTATE.PrimitiveTags.displayName">
            <summary>
            display-name
            <para>The user’s display name, escaped as described in the IRCv3 spec. This is empty if it is never set.</para>
            <para>The IRCv3 spec - https://ircv3.net/specs/extensions/message-tags.html </para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.GLOBALUSERSTATE.PrimitiveTags.emoteSets">
            <summary>
            emote-sets
            <para>A comma-separated list of emotes, belonging to one or more emote sets.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.GLOBALUSERSTATE.PrimitiveTags.turbo">
            <summary>
            turbo
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.GLOBALUSERSTATE.PrimitiveTags.userId">
            <summary>
            user-id
            <para>The user’s ID.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.GLOBALUSERSTATE.PrimitiveTags.userType">
            <summary>
            user-type
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.GLOBALUSERSTATE.RawTags">
            <summary>
            IRC Tags strings
            <para>On successful login, provides data about the current logged-in user through IRC tags. It is sent after successfully authenticating (sending a PASS/NICK command).</para>
            <para>https://dev.twitch.tv/docs/irc/tags#globaluserstate-twitch-tags</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.GLOBALUSERSTATE.RawTags.propertyInfos">
            <summary>
            Use a static property infos to reduce reflections lookups
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.GLOBALUSERSTATE.RawTags.#ctor">
            <summary>
            GLOBALUSERSTATE IRC Tags strings
            <para>On successful login, provides data about the current logged-in user through IRC tags. It is sent after successfully authenticating (sending a PASS/NICK command).</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.GLOBALUSERSTATE.RawTags.badgeInfo">
            <summary>
            badge-info
            <para>Meta-data related to the chat badges in the badges tag.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.GLOBALUSERSTATE.RawTags.badges">
            <summary>
            badges
            <para>Comma-separated list of chat badges and the version of each badge.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.GLOBALUSERSTATE.RawTags.color">
            <summary>
            color
            <para>Hexadecimal RGB color code; the empty string if it is never set.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.GLOBALUSERSTATE.RawTags.displayName">
            <summary>
            display-name
            <para>The user’s display name, escaped as described in the IRCv3 spec. This is empty if it is never set.</para>
            <para>The IRCv3 spec - https://ircv3.net/specs/extensions/message-tags.html </para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.GLOBALUSERSTATE.RawTags.emoteSets">
            <summary>
            emote-sets
            <para>A comma-separated list of emotes, belonging to one or more emote sets.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.GLOBALUSERSTATE.RawTags.turbo">
            <summary>
            turbo
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.GLOBALUSERSTATE.RawTags.userId">
            <summary>
            user-id
            <para>The user’s ID.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.GLOBALUSERSTATE.RawTags.userType">
            <summary>
            user-type
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.PrimitiveTags">
            <summary>
            IRC Tags as key value set of strings using primitive types
            <para>Sends a message to a channel.</para>
            <para>https://dev.twitch.tv/docs/irc/tags/#privmsg-twitch-tags</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.PrimitiveTags.propertyInfos">
            <summary>
            Use a static property infos to reduce reflections lookups
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.PrimitiveTags.#ctor">
            <summary>
            PRIVMSG IRC Tags as key value set of strings using primitive types
            <para>Sends a message to a channel.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.PrimitiveTags.badgeInfo">
            <summary>
            badge-info
            <para>Meta-data related to the chat badges in the badges tag.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.PrimitiveTags.badges">
            <summary>
            badges
            <para>Comma-separated list of chat badges and the version of each badge.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.PrimitiveTags.bits">
            <summary>
            bits
            <para>(Sent only for Bits messages) The amount of cheer/Bits employed by the user.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.PrimitiveTags.color">
            <summary>
            color
            <para>Hexadecimal RGB color code; the empty string if it is never set.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.PrimitiveTags.displayName">
            <summary>
            display-name
            <para>The user’s display name, escaped as described in the IRCv3 spec. This is empty if it is never set.</para>
            <para>The IRCv3 spec - https://ircv3.net/specs/extensions/message-tags.html </para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.PrimitiveTags.emotes">
            <summary>
            emotes
            <para>Information to replace text in the message with emote images.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.PrimitiveTags.flags">
            <summary>
            flags
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.PrimitiveTags.id">
            <summary>
            id
            <para>A unique ID for the message.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.PrimitiveTags.mod">
            <summary>
            mod
            <para>1 if the user has a moderator badge; otherwise, 0.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.PrimitiveTags.roomId">
            <summary>
            room-id
            <para>The channel ID.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.PrimitiveTags.subscriber">
            <summary>
            subscriber
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.PrimitiveTags.tmiSentTs">
            <summary>
            tmi-sent-ts
            <para>Timestamp when the server received the message.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.PrimitiveTags.turbo">
            <summary>
            turbo
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.PrimitiveTags.userId">
            <summary>
            user-id
            <para>The user’s ID.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.PrimitiveTags.userType">
            <summary>
            user-type
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.ComplexTags">
            <summary>
            IRC Tags as typed objects using custom types
            <para>Sends a message to a channel.</para>
            <para>https://dev.twitch.tv/docs/irc/tags/#privmsg-twitch-tags</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.ComplexTags.propertyInfos">
            <summary>
            Use a static property infos to reduce reflections lookups
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.ComplexTags.#ctor">
            <summary>
            PRIVMSG IRC Tags as typed objects using custom types
            <para>Sends a message to a channel.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.ComplexTags.badgeInfo">
            <summary>
            badge-info
            <para>Meta-data related to the chat badges in the badges tag.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.ComplexTags.badges">
            <summary>
            badges
            <para>Comma-separated list of chat badges and the version of each badge.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.ComplexTags.bits">
            <summary>
            bits
            <para>(Sent only for Bits messages) The amount of cheer/Bits employed by the user.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.ComplexTags.color">
            <summary>
            color
            <para>Hexadecimal RGB color code; the empty string if it is never set.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.ComplexTags.displayName">
            <summary>
            display-name
            <para>The user’s display name, escaped as described in the IRCv3 spec. This is empty if it is never set.</para>
            <para>The IRCv3 spec - https://ircv3.net/specs/extensions/message-tags.html </para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.ComplexTags.emotes">
            <summary>
            emotes
            <para>Information to replace text in the message with emote images.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.ComplexTags.flags">
            <summary>
            flags
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.ComplexTags.id">
            <summary>
            id
            <para>A unique ID for the message.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.ComplexTags.mod">
            <summary>
            mod
            <para>1 if the user has a moderator badge; otherwise, 0.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.ComplexTags.roomId">
            <summary>
            room-id
            <para>The channel ID.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.ComplexTags.subscriber">
            <summary>
            subscriber
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.ComplexTags.tmiSentTs">
            <summary>
            tmi-sent-ts
            <para>Timestamp when the server received the message.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.ComplexTags.turbo">
            <summary>
            turbo
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.ComplexTags.userId">
            <summary>
            user-id
            <para>The user’s ID.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.ComplexTags.userType">
            <summary>
            user-type
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.RawTags">
            <summary>
            IRC Tags strings
            <para>Sends a message to a channel.</para>
            <para>https://dev.twitch.tv/docs/irc/tags/#privmsg-twitch-tags</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.RawTags.propertyInfos">
            <summary>
            Use a static property infos to reduce reflections lookups
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.RawTags.#ctor">
            <summary>
            PRIVMSG IRC Tags strings
            <para>Sends a message to a channel.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.RawTags.badgeInfo">
            <summary>
            badge-info
            <para>Meta-data related to the chat badges in the badges tag.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.RawTags.badges">
            <summary>
            badges
            <para>Comma-separated list of chat badges and the version of each badge.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.RawTags.bits">
            <summary>
            bits
            <para>(Sent only for Bits messages) The amount of cheer/Bits employed by the user.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.RawTags.color">
            <summary>
            color
            <para>Hexadecimal RGB color code; the empty string if it is never set.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.RawTags.displayName">
            <summary>
            display-name
            <para>The user’s display name, escaped as described in the IRCv3 spec. This is empty if it is never set.</para>
            <para>The IRCv3 spec - https://ircv3.net/specs/extensions/message-tags.html </para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.RawTags.emotes">
            <summary>
            emotes
            <para>Information to replace text in the message with emote images.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.RawTags.flags">
            <summary>
            flags
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.RawTags.id">
            <summary>
            id
            <para>A unique ID for the message.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.RawTags.mod">
            <summary>
            mod
            <para>1 if the user has a moderator badge; otherwise, 0.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.RawTags.roomId">
            <summary>
            room-id
            <para>The channel ID.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.RawTags.subscriber">
            <summary>
            subscriber
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.RawTags.tmiSentTs">
            <summary>
            tmi-sent-ts
            <para>Timestamp when the server received the message.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.RawTags.turbo">
            <summary>
            turbo
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.RawTags.userId">
            <summary>
            user-id
            <para>The user’s ID.</para>
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.RawTags.userType">
            <summary>
            user-type
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.MsgId">
            <summary>
            The type of notice (not the ID).
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.MsgId.None">
            <summary>
            Unset value
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.MsgId.Sub">
            <summary>
            User subscribed to a channel
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.MsgId.Resub">
            <summary>
            User resub to a channel
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.MsgId.SubGift">
            <summary>
            Gift sub event
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.MsgId.AnonSubGift">
            <summary>
            Anonymous sub gift event
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.MsgId.SubMysteryGift">
            <summary>
            Anonymous user gifts multiple subs
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.MsgId.GiftPaidUpgrade">
            <summary>
            Gift sub given during a promo period
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.MsgId.RewardGift">
            <summary>
            (Undocumented)
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.MsgId.AnonGiftPaidUpgrade">
            <summary>
            Anonymous gift sub given during a promo period
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.MsgId.Raid">
            <summary>
            Incoming raid from another channel
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.MsgId.Unraid">
            <summary>
            Canceled raid command
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.MsgId.Ritual">
            <summary>
            Notice sent for a new_chatter ritual
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.MsgId.BitsBadgeTier">
            <summary>
            The tier of the bits badge the user just earned
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.SubPlan">
            <summary>
            The type of subscription plan being used
            ie. Prime, 2000
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.SubPlan._Prime">
            <summary>
            Tier (Prime)
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.SubPlan._1000">
            <summary>
            Tier 1
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.SubPlan._2000">
            <summary>
            Tier 2
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.SubPlan._3000">
            <summary>
            Tier 3
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.ExtensionCapabilities">
            <summary>
            Extension methods to extract properties from irc message
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.ExtensionCapabilities.Tags``1(IRCnect.Channel.Monitor.MonitorArgs)">
            <summary>
            Gets the topic prototype properties
            <para>ie. @tag-one=value;tag-two=value;</para>
            </summary>
            <param name="args">Args to parse for message.</param>
            <typeparam name="T">IRCTags type</typeparam>
            <returns>Type safe properties</returns>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.ExtensionCapabilities.ActionType(IRCnect.Channel.Monitor.MonitorArgs)">
            <summary>
            Capabilities action type which are the Tags
            </summary>
            <param name="args">Args to parse for message.</param>
            <returns>The tag action type if any</returns>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.ExtensionCapabilities.Topic(IRCnect.Channel.Monitor.MonitorArgs)">
            <summary>
            Type safe Capabilities action type which are the Tags
            </summary>
            <param name="args">Args to parse for message.</param>
            <returns>Type safe tag action type or CapabilitiesTopics.UNKNOWN</returns>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.ExtensionCapabilities.GetTagsByTypeName(IRCnect.Channel.Monitor.MonitorArgs,System.String)">
            <summary>
            Get a set of irc tags by the class type name
            </summary>
            <param name="args">Args to parse for message.</param>
            <param name="typeName">Tags Type name</param>
            <returns>Tags of requested type or null</returns>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.ExtensionCapabilities.GetTagsByType``1(IRCnect.Channel.Monitor.MonitorArgs)">
            <summary>
            Get a set of irc tags by the class type name
            </summary>
            <typeparam name="T">IRCTags type</typeparam>
            <param name="args">Args to parse for message.</param>
            <returns>Tags of requested type or null</returns>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.ExtensionCapabilities.IsSubscriber(TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.ComplexTags)">
            <summary>
            User has a subscriber badge
            </summary>
            <param name="complexTags">Tags to be parsed for subscriber</param>
            <returns></returns>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.ExtensionCapabilities.IsSubscriber(TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.ComplexTags)">
            <summary>
            User has a subscriber badge
            </summary>
            <param name="complexTags">Tags to be parsed for subscriber</param>
            <returns></returns>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Badge">
            <summary>
            A string value and a number value separated by a slash
            ie. subscriber/2
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.Badge.name">
            <summary>
            Name of the badge data
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.Badge.version">
            <summary>
            Version number of the badge data
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Badge.#ctor(System.String)">
            <summary>
            A string and number set
            </summary>
            <param name="data">A string value and a number value separated by a slash</param>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Badge.ToString">
            <summary>
            Badge name and version
            </summary>
            <returns> ie. global_mod/1</returns>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesArgs">
            <summary>
            Args used by filters to store parsed event data.
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesArgs.info">
            <summary>
            Properties data found in the parsed message.
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesArgs.topic">
            <summary>
            The action that occurred.
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesArgs.channel">
            <summary>
            The channel the message came from.
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesArgs.message">
            <summary>
            What was said in the message.
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesArgs.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="data">Data passes in before processing (usually raw data)</param>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesArgs.MatchFilters(System.Collections.Generic.Dictionary{System.Text.RegularExpressions.Regex,System.Action{IRCnect.Channel.Monitor.MonitorArgs}})">
            <summary>
            Compares data to filters for matches of specific data.
            </summary>
            <param name="filters">Filters to match data against.</param>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesFilter">
            <summary>
            Filter to catch Twitch events
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesFilter.EVENT_PATTERN">
            <summary>
            Pattern to match incoming irc message for regex
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesFilter.OnJoin">
            <summary>
            Join a channel.
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesFilter.OnMode">
            <summary>
            Gain/lose moderator (operator) status in a channel.
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesFilter.OnNames">
            <summary>
            List current chatters in a channel.
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesFilter.OnPart">
            <summary>
            Depart from a channel.
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesFilter.OnClearChat">
            <summary>
            Purges all chat messages in a channel, or purges chat messages from a specific user (typically after a timeout or ban).
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesFilter.OnClearMsg">
            <summary>
            Removes a single message from a channel.This is triggered via /delete target-msg-id on IRC.
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesFilter.OnGlobalUserState">
            <summary>
            On successful login, provides data about the current logged-in user through IRC tags. It is sent after successfully authenticating (sending a PASS/NICK command).
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesFilter.OnPrivMsg">
            <summary>
            A message to a channel.
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesFilter.OnRoomState">
            <summary>
            Room-state data when a user joins a channel or a room setting is changed.For a join, the message contains all chat-room settings.For changes, only the relevant tag is sent.
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesFilter.OnUserNotice">
            <summary>
            A notice to the user when any of several events occurs.
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesFilter.OnUserState">
            <summary>
            User-state data when a user joins a channel or sends a PRIVMSG to a channel.
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesFilter.OnHostTarget">
            <summary>
            Channel starts or stops host mode.
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesFilter.OnNotice">
            <summary>
            General notices from the server.
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesFilter.OnReconnect">
            <summary>
            Rejoin channels after a restart.
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesFilter.OnTopicReceived">
            <summary>
            Event for all topics
            NOTE: use this.topic to get the current event topic
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesFilter.Instance">
            <summary>
            Access to class
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesFilter.#cctor">
            <summary>
            static Constructor 
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesFilter.#ctor(System.String)">
            <summary>
            Constructor 
            </summary>
            <param name="pattern">Regular expressions pattern to match against input.</param>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesFilter.Parse(System.String)">
            <summary>
            Return raw chat message
            </summary>
            <param name="message">Raw chat response message to parse</param>
            <returns>Message interface</returns>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesTopics">
            <summary>
            Capabilities Twitch Events
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesTopics._NONE">
            <summary>
            Replace ActionTypes _NONE with CapabilitiesTopics UNKNOWN set to -1
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesTopics.UNKNOWN">
            <summary>
            Topic not known
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesTopics.JOIN">
            <summary>
            Join a channel.
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesTopics.MODE">
            <summary>
            Gain/lose moderator (operator) status in a channel.
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesTopics.NAMES">
            <summary>
            List current chatters in a channel.
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesTopics.PART">
            <summary>
            Depart from a channel.
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesTopics.CLEARCHAT">
            <summary>
            Purges all chat messages in a channel, or purges chat messages from a specific user (typically after a timeout or ban).
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesTopics.CLEARMSG">
            <summary>
            Removes a single message from a channel.This is triggered via /delete[target-msg-id] on IRC.
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesTopics.GLOBALUSERSTATE">
            <summary>
            On successful login, provides data about the current logged-in user through IRC tags. It is sent after successfully authenticating (sending a PASS/NICK command).
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesTopics.PRIVMSG">
            <summary>
            Sends a message to a channel.
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesTopics.ROOMSTATE">
            <summary>
            Sends room-state data when a user joins a channel or a room setting is changed.For a join, the message contains all chat-room settings.For changes, only the relevant tag is sent.
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesTopics.USERNOTICE">
            <summary>
            Sends a notice to the user when any of several events occurs.
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesTopics.USERSTATE">
            <summary>
            Sends user-state data when a user joins a channel or sends a PRIVMSG to a channel.
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesTopics.HOSTTARGET">
            <summary>
            Channel starts or stops host mode.
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesTopics.NOTICE">
            <summary>
            General notices from the server.
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesTopics.RECONNECT">
            <summary>
            Rejoin channels after a restart.
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Capabilities.Delimiter">
            <summary>
            Sets a delimiter for array properties
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Capabilities.Delimiter.value">
            <summary>
            The delimiter
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Delimiter.#ctor(System.Char)">
            <summary>
            Sets the delimiter
            </summary>
            <param name="value">The delimiter value to use</param>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.Capabilities.Delimiter.GetDelimiter(System.Reflection.PropertyInfo)">
            <summary>
            Parse property info for assigned delimiter value
            </summary>
            <param name="propInfo">Property info type and value of member</param>
            <returns></returns>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.TwitchMonitor">
            <summary>
            Monitors the chat room for messages in and out bound
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Monitor.TwitchMonitor.client">
            <summary>
            The client to connect to the chat room
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.TwitchMonitor.#ctor(TwitchUnityIRC.Connection.TwitchChatClient)">
            <summary>
            Constructor
            </summary>
            <param name="client">The client to connect to the chat room</param>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Monitor.TwitchMonitor.Parse(System.String)">
            <summary>
            Parse the received message into a data structure
            </summary>
            <param name="message">Raw inbound message</param>
            <returns>A list of parsed filtered message data</returns>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Monitor.Replies.Actions.TwitchActionTypes">
            <summary>
            Actions that comm in on the message feed that refer to status codes
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Replies.Actions.TwitchActionTypes.NUMERIC_353">
            <summary>
            Expected code
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Replies.Actions.TwitchActionTypes.NUMERIC_372">
            <summary>
            Expected code
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Replies.Actions.TwitchActionTypes.NUMERIC_375">
            <summary>
            Expected code
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Monitor.Replies.Actions.TwitchActionTypes.All">
            <summary>
            All the actions types in one array.
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Notifications.Cheer">
            <summary>
            A cheer object after parsed from the chat message
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Notifications.Cheer.#ctor(System.String,System.Int32)">
            <summary>
            Create a cheer object after parsed from the chat message
            </summary>
            <param name="name">Name of the cheer emote</param>
            <param name="amount">Amount in bit(s)</param>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Notifications.Cheer.name">
            <summary>
            Name of the cheer emote
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Notifications.Cheer.amount">
            <summary>
            Amount in bit(s)
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Notifications.Cheer.Parse(System.String)">
            <summary>
            Parse the cheers/bits from the chat message
            </summary>
            <param name="message">CHat message from IRC</param>
            <returns></returns>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Notifications.Cheer.ToString">
            <summary>
            Cheer name and amount
            </summary>
            <returns> ie. Cheer1</returns>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Notifications.UnhandledNotificationArgs">
            <summary>
            UnhandledNotification
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Notifications.UnhandledNotificationArgs.#ctor(TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesArgs)">
            <summary>
            Create a new unhandled notification object
            </summary>
            <param name="capabilitiesArgs">CapabilitiesArgs that occurred on the notice</param>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Notifications.PartArgs">
            <summary>
            User parts the channel
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Notifications.PartArgs.#ctor(TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesArgs,TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PART.ComplexTags)">
            <summary>
            Create a new part object
            </summary>
            <param name="capabilitiesArgs">CapabilitiesArgs that occurred on the notice</param>
            <param name="complexTags">Properties associated with the notification</param>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Notifications.JoinArgs">
            <summary>
            It is sent when user joins the channel
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Notifications.JoinArgs.#ctor(TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesArgs,TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.JOIN.ComplexTags)">
            <summary>
            Create a new join object
            </summary>
            <param name="capabilitiesArgs">CapabilitiesArgs that occurred on the notice</param>
            <param name="complexTags">Properties associated with the notification</param>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Notifications.ClearChatArgs">
            <summary>
            It is sent when messages are purged from chat
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Notifications.ClearChatArgs.#ctor(TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesArgs,TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.CLEARCHAT.ComplexTags)">
            <summary>
            Create a new global user state object
            </summary>
            <param name="capabilitiesArgs">CapabilitiesArgs that occurred on the notice</param>
            <param name="complexTags">Properties associated with the notification</param>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Notifications.GlobalUserStateArgs">
            <summary>
            It is sent after successfully authenticating (sending a PASS/NICK command).
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Notifications.GlobalUserStateArgs.#ctor(TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesArgs,TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.GLOBALUSERSTATE.ComplexTags)">
            <summary>
            Create a new global user state object
            </summary>
            <param name="capabilitiesArgs">CapabilitiesArgs that occurred on the notice</param>
            <param name="complexTags">Properties associated with the notification</param>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Notifications.HostTargetArgs">
            <summary>
            Create a new host target object
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Notifications.HostTargetArgs.#ctor(TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesArgs,TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.HOSTTARGET.ComplexTags)">
            <summary>
            Create a new host target object
            </summary>
            <param name="capabilitiesArgs">CapabilitiesArgs that occurred on the notice</param>
            <param name="complexTags">Properties associated with the notification</param>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Notifications.UserStateArgs">
            <summary>
            Sent user-state data when a user joins a channel or sends a PRIVMSG to a channel.
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Notifications.UserStateArgs.#ctor(TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesArgs,TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERSTATE.ComplexTags)">
            <summary>
            Create a new user state object
            </summary>
            <param name="capabilitiesArgs">CapabilitiesArgs that occurred on the notice</param>
            <param name="complexTags">Properties associated with the notification</param>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Notifications.CheerArgs">
            <summary>
            Cheer args representing bits sent in a chat message
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Notifications.CheerArgs.#ctor(TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesArgs,TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.ComplexTags)">
            <summary>
            Cheer args representing bits sent in a chat message
            </summary>
            <param name="capabilitiesArgs">CapabilitiesArgs that occurred on the notice</param>
            <param name="complexTags">Properties associated with the notification</param>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Notifications.PrivMsgArgs">
            <summary>
            Messages send from a channel
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Notifications.PrivMsgArgs.#ctor(TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesArgs,TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.PRIVMSG.ComplexTags)">
            <summary>
            Messages send from a channel
            </summary>
            <param name="capabilitiesArgs">Args used by filters to store parsed event data.</param>
            <param name="complexTags">IRC Tags as typed objects using custom types</param>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Notifications.RoomStateTags">
            <summary>
            Sends room-state data when a user joins a channel or a room setting is changed. 
            For a join, the message contains all chat-room settings. For changes, only the relevant tag is sent.
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Notifications.RoomStateTags.State">
            <summary>
            The state of the chat room 
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Notifications.RoomStateTags.State.EmoteOnly">
            <summary>
            Chat is in emote only mode
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Notifications.RoomStateTags.State.FollowersOnly">
            <summary>
            Chat is in follower only mode
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Notifications.RoomStateTags.State.R9k">
            <summary>
            Chat is in R9k mode
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Notifications.RoomStateTags.State.Rituals">
            <summary>
            The ritual send
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Notifications.RoomStateTags.State.RoomId">
            <summary>
            The room id
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Notifications.RoomStateTags.State.Slow">
            <summary>
            Chat is in slow mode
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Notifications.RoomStateTags.State.SubsOnly">
            <summary>
            Chat is in sub only mode
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Notifications.RoomStateTags.#ctor(TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ROOMSTATE.ComplexTags)">
            <summary>
            Create a room state object
            </summary>
            <param name="complexTags">Sends room-state data when a user joins a channel or a room setting is changed.</param>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Notifications.RoomStateTags.IsJoinState">
            <summary>
            Is this from a room join event
            </summary>
            <returns>State is join state</returns>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Notifications.RoomStateTags.GetState">
            <summary>
            The current state based on the properties and tags
            </summary>
            <returns>The state of the chat room</returns>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Notifications.RoomStateArgs">
            <summary>
            User joins a channel or a room setting is changed
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Notifications.RoomStateArgs.#ctor(TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesArgs,TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.ROOMSTATE.ComplexTags)">
            <summary>
            Room state args representing the current state of the chat room set by the broadcaster or moderators
            </summary>
            <param name="capabilitiesArgs">Args used by filters to store parsed event data.</param>
            <param name="complexTags">IRC Tags as typed objects using custom types</param>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Notifications.UserNoticeArgs">
            <summary>
            A notice to the user when these events occur: Subscription, Incoming raid, Channel ritual
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Notifications.UserNoticeArgs.#ctor(TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesArgs,TwitchUnityIRC.Channel.Monitor.Capabilities.Tags.USERNOTICE.ComplexTags)">
            <summary>
            Create a new user notice object
            </summary>
            <param name="capabilitiesArgs">Args used by filters to store parsed event data.</param>
            <param name="complexTags">IRC Tags as typed objects using custom types</param>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Notifications.NotificationsArgs`1">
            <summary>
            Args used by filters to store parsed event data.
            </summary>
            <typeparam name="T">Any IRCTags</typeparam>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Notifications.NotificationsArgs`1.capabilitiesArgs">
            <summary>
            CapabilitiesArgs that occurred on the notice.
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Notifications.NotificationsArgs`1.complexTags">
            <summary>
            The action that occurred.
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Notifications.NotificationsArgs`1.#ctor(TwitchUnityIRC.Channel.Monitor.Capabilities.CapabilitiesArgs,`0)">
            <summary>
            Constructor
            </summary>
            <param name="capabilitiesArgs">CapabilitiesArgs that occurred on the notice</param>
            <param name="complexTags">Properties associated with the notification</param>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Notifications.NotificationHandler">
            <summary>
            Filter to catch Twitch events
            <para>NOTICE: Requires CapabilitiesFilter.Instance be added to the monitor filters</para>
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Notifications.NotificationHandler.#cctor">
            <summary>
            Constructor 
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Notifications.NotificationHandler.Finalize">
            <summary>
            Destructor 
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Notifications.NotificationHandler.OnUnhandledNotification">
            <summary>
            OnUnhandledNotification
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Notifications.NotificationHandler.OnNickJoin">
            <summary>
            Sent when user joins the channel
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Notifications.NotificationHandler.OnNickPart">
            <summary>
            Sent when user parts the channel
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Notifications.NotificationHandler.OnClearChat">
            <summary>
            Sent after successfully authenticating
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Notifications.NotificationHandler.OnGlobalUserState">
            <summary>
            Sent after successfully authenticating
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Notifications.NotificationHandler.OnHostTarget">
            <summary>
            Send for channels that are hosting
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Notifications.NotificationHandler.OnUserState">
            <summary>
            Identifies a user’s chat settings or properties (e.g., chat color).
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Notifications.NotificationHandler.OnCheer">
            <summary>
            Bits/Cheer event occurred
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Notifications.NotificationHandler.OnJoin">
            <summary>
            Client has joined the chat room
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Notifications.NotificationHandler.OnEmoteOnly">
            <summary>
            Emote-only mode. If enabled, only emotes are allowed in chat. Valid values: 0 (disabled) or 1 (enabled).
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Notifications.NotificationHandler.OnFollowersOnly">
            <summary>
            Followers-only mode. If enabled, controls which followers can chat. Valid values: -1 (disabled), 0 (all followers can chat), or a non-negative integer (only users following for at least the specified number of minutes can chat).
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Notifications.NotificationHandler.OnR9k">
            <summary>
            R9K mode. If enabled, messages with more than 9 characters must be unique. Valid values: 0 (disabled) or 1 (enabled).
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Notifications.NotificationHandler.OnRituals">
            <summary>
            A room state change
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Notifications.NotificationHandler.OnSlow">
            <summary>
            The number of seconds a chatter without moderator privileges must wait between sending messages.
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Notifications.NotificationHandler.OnSubsOnly">
            <summary>
            Subscribers-only mode. If enabled, only subscribers and moderators can chat. Valid values: 0 (disabled) or 1 (enabled).
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Notifications.NotificationHandler.OnSub">
            <summary>
            User subscribes to channel.
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Notifications.NotificationHandler.OnResub">
            <summary>
            User resubscribes to channel.
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Notifications.NotificationHandler.OnSubGift">
            <summary>
            User gifts a sub to channel.
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Notifications.NotificationHandler.OnAnonSubGift">
            <summary>
            User gifts a anonymous sub to channel.
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Notifications.NotificationHandler.OnSubMysteryGift">
            <summary>
            User sub mystery gift.
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Notifications.NotificationHandler.OnGiftPaidUpgrade">
            <summary>
            User gift paid upgrade.
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Notifications.NotificationHandler.OnRewardGift">
            <summary>
            A reward gift.
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Notifications.NotificationHandler.OnAnonGiftPaidUpgrade">
            <summary>
            An anon gift paid upgrade.
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Notifications.NotificationHandler.OnRaid">
            <summary>
            User raids a channel.
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Notifications.NotificationHandler.OnUnraid">
            <summary>
            User chooses to unraid a channel.
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Notifications.NotificationHandler.OnRitual">
            <summary>
            User uses a channel ritual.
            </summary>
        </member>
        <member name="E:TwitchUnityIRC.Channel.Notifications.NotificationHandler.OnBitsBadgeTier">
            <summary>
            User bits badge tier changes.
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Interaction.TwitchMessenger">
            <summary>
            Concrete class providing the functionality for sending messages along the Twitch chat IRC stream.
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Channel.Interaction.TwitchMessenger.roomVisitor">
            <summary>
            Access to the room visitor a class defining the alternate Twitch account name of nick
            </summary>        
        </member>
        <member name="P:TwitchUnityIRC.Channel.Interaction.TwitchMessenger.channel">
            <summary>
            Channel to connect to monitor messages
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Interaction.TwitchMessenger.#ctor">
            <summary>
            Constructor
            <para>Creates object for Twitch chat messenger</para>
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Interaction.TwitchMessenger.#ctor(TwitchUnityIRC.Channel.TwitchRoomVisitor,System.String)">
            <summary>
            Constructor
            <para>Creates object for Twitch chat messenger</para>
            </summary>
            <param name="roomVisitor">Defines the alternate Twitch account name of nick</param>
            <param name="channel">Channel to connect to</param>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Interaction.TwitchMessenger.PreparedMessage(System.String)">
            <summary>
            Modify message before sending
            </summary>
            <param name="message">Message being sent</param>
            <returns>The modified message</returns>
        </member>
        <member name="M:TwitchUnityIRC.Channel.Interaction.TwitchMessenger.PreparedMessage(IRCnect.Channel.Interaction.PendingMessageArgs.Type,System.String)">
            <summary>
            Modify message before sending
            </summary>
            <param name="type">How to send.</param>
            <param name="message">Message to send.</param>
            <returns></returns>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Interaction.Native.TwitchCommandID">
            <summary>
            Ids for the Native Twitch commands for the server/host.
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Interaction.Native.TwitchCommandID.W">
            <summary>
            Format /w
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Interaction.Native.TwitchCommandID.DISCONNECT">
            <summary>
            Format /disconnect
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Interaction.Native.TwitchCommandID.MODS">
            <summary>
            Format /mods
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Interaction.Native.TwitchCommandID.COLOR">
            <summary>
            Format /color {0}
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Interaction.Native.TwitchCommandID.COMMERCIAL">
            <summary>
            Format /commercial {0}
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Interaction.Native.TwitchCommandID.MOD">
            <summary>
            Format /mod {0}
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Interaction.Native.TwitchCommandID.UNMOD">
            <summary>
            Format /unmod {0}
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Interaction.Native.TwitchCommandID.BAN">
            <summary>
            Format /ban {0}
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Interaction.Native.TwitchCommandID.UNBAN">
            <summary>
            Format /unban {0}
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Interaction.Native.TwitchCommandID.CLEAR">
            <summary>
            Format /clear
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Interaction.Native.TwitchCommandID.TIMEOUT">
            <summary>
            Format /timeout {0} {1}
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Interaction.Native.TwitchCommandID.SUBSCRIBERS">
            <summary>
            Format /subscribers
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Interaction.Native.TwitchCommandID.SUBSCRIBERSOFF">
            <summary>
            Format /subscribersoff
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Interaction.Native.TwitchCommandID.SLOW">
            <summary>
            Format /slow {0}
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Interaction.Native.TwitchCommandID.SLOWOFF">
            <summary>
            Format /slowoff
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Interaction.Native.TwitchCommandID.R9KBETA">
            <summary>
            Format /r9kbeta
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Interaction.Native.TwitchCommandID.R9KBETAOFF">
            <summary>
            Format /r9kbetaoff
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Interaction.Native.TwitchCommandID.HOST">
            <summary>
            Format /host {0}
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Interaction.Native.TwitchCommandID.UNHOST">
            <summary>
            Format /unhost {0}
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.Interaction.Native.TwitchNativeCommands">
            <summary>
            Twitch Native commands are those provided by the IRC server/hosts.
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Channel.Interaction.Native.TwitchNativeCommands.Commands">
            <summary>
            Basic Twitch chat room commands
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Channel.TwitchRoomVisitor">
            <summary>
            Access to the room visitor a class defining the alternate Twitch account name or nick
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Channel.TwitchRoomVisitor.#ctor(System.String,System.IO.StreamWriter)">
            <summary>
            Constructor
            </summary>
            <param name="nick">The nick to visit join/part the chat room</param>
            <param name="writer">The stream writer connected to the chat client</param>
        </member>
        <member name="M:TwitchUnityIRC.Channel.TwitchRoomVisitor.Capabilities(System.String[])">
            <summary>
            Sends capabilities requests to server
            <para>NOTE: MUST be sent before joining the channel and after Connect is called.</para>
            </summary>
            <param name="capReqs">Use one of TwitchProtocol.CAP_REQ in the Utils namespace.
            <para>Leave without parameters to use TwitchProtocol.CAP_REQ.All</para></param>
        </member>
        <member name="T:TwitchUnityIRC.SharedHelix.Request">
            <summary>
            Make Unity Web Request
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.SharedHelix.Request.Headers(System.String,System.String)">
            <summary>
            Create basic headers to make request
            <para>Authorization and Client-ID</para>
            </summary>
            <param name="accessToken">User access token</param>
            <param name="clientId">Application client id</param>
            <returns></returns>
        </member>
        <member name="M:TwitchUnityIRC.SharedHelix.Request.HeadersWithContentType(System.String,System.String)">
            <summary>
            Create basic headers with content type to make request
            <para>Authorization and Client-ID and Content-Type</para>
            </summary>
            <param name="accessToken">User access token</param>
            <param name="clientId">Application client id</param>
            <returns></returns>
        </member>
        <member name="M:TwitchUnityIRC.SharedHelix.Request.GetEndpoint``1(System.String,System.String,System.String)">
            <summary>
            Makes a Get UnityWebRequest
            </summary>
            <typeparam name="T">Type of data structure to parse JSON</typeparam>
            <param name="accessToken">User access token</param>
            <param name="clientId">Application client id</param>
            <param name="url">A fully qualified url endpoint</param>
            <returns>Type safe parsed JSON data</returns>
        </member>
        <member name="M:TwitchUnityIRC.SharedHelix.Request.DeleteEndpoint(System.String,System.String,System.String)">
            <summary>
            Makes a Delete UnityWebRequest
            </summary>
            <param name="accessToken">User access token</param>
            <param name="clientId">Application client id</param>
            <param name="url">A fully qualified url endpoint</param>
            <returns>Request http status code</returns>
        </member>
        <member name="M:TwitchUnityIRC.SharedHelix.Request.PostEndpoint(System.String,System.String,System.String,System.String)">
            <summary>
            Makes a Post UnityWebRequest
            </summary>
            <param name="accessToken">User access token</param>
            <param name="clientId">Application client id</param>
            <param name="url">A fully qualified url endpoint</param>
            <param name="dataString">A json string {username: 'My Name'} (Can be string.Empty)</param>
            <returns>Request http status code</returns>
        </member>
        <member name="M:TwitchUnityIRC.SharedHelix.Request.PostEndpoint``1(System.String,System.String,System.String)">
            <summary>
            Makes a Post UnityWebRequest
            </summary>
            <typeparam name="T">Type of data structure to parse JSON</typeparam>
            <param name="accessToken">User access token</param>
            <param name="clientId">Application client id</param>
            <param name="url">A fully qualified url endpoint</param>
            <returns>Type safe parsed JSON data</returns>
        </member>
        <member name="M:TwitchUnityIRC.SharedHelix.Request.PostEndpoint``1(System.String,System.String,System.String,System.String)">
            <summary>
            Makes a Post UnityWebRequest
            </summary>
            <typeparam name="T">Type of data structure to parse JSON</typeparam>
            <param name="accessToken">User access token</param>
            <param name="clientId">Application client id</param>
            <param name="url">A fully qualified url endpoint</param>
            <param name="dataString">A json string {username: 'My Name'}</param>
            <returns>Type safe parsed JSON data</returns>
        </member>
        <member name="M:TwitchUnityIRC.SharedHelix.Request.PutEndpoint(System.String,System.String,System.String,System.String)">
            <summary>
            Makes a Put UnityWebRequest
            </summary>
            <param name="accessToken">User access token</param>
            <param name="clientId">Application client id</param>
            <param name="url">A fully qualified url endpoint</param>
            <param name="dataString">A json string {username: 'My Name'}</param>
            <returns>Request http status code</returns>
        </member>
        <member name="M:TwitchUnityIRC.SharedHelix.Request.PutEndpoint``1(System.String,System.String,System.String,System.String)">
            <summary>
            Makes a Put UnityWebRequest
            </summary>
            <typeparam name="T">Type of data structure to parse JSON</typeparam>
            <param name="accessToken">User access token</param>
            <param name="clientId">Application client id</param>
            <param name="url">A fully qualified url endpoint</param>
            <param name="dataString">A json string {username: 'My Name'}</param>
            <returns>Type safe parsed JSON data</returns>
        </member>
        <member name="M:TwitchUnityIRC.SharedHelix.Request.PatchEndpoint(System.String,System.String,System.String,System.String)">
            <summary>
            Makes a Patch UnityWebRequest
            </summary>
            <param name="accessToken">User access token</param>
            <param name="clientId">Application client id</param>
            <param name="url">A fully qualified url endpoint</param>
            <param name="dataString">A json string {username: 'My Name'}</param>
            <returns>Request http status code</returns>
        </member>
        <member name="T:TwitchUnityIRC.SharedHelix.HelixAPI">
            <summary>
            Access to API auth and endpoint
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.SharedHelix.HelixAPI.instance">
            <summary>
            Access to API auth and endpoint
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.SharedHelix.HelixAPI.clientId">
            <summary>
            Application client id from app created in Twitch dev console
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.SharedHelix.HelixAPI.clientSecret">
            <summary>
            Application client secret from app created in Twitch dev console
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.SharedHelix.HelixAPI.scopes">
            <summary>
            Scopes required to access endpoint resources
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.SharedHelix.HelixAPI.DebugLog(System.String,System.Boolean)">
            <summary>
            Debug log messages with a show/no show flag
            </summary>
            <param name="value">What to log in the console</param>
            <param name="showDebugLogs">Show/Hide log value</param>
        </member>
        <member name="M:TwitchUnityIRC.SharedHelix.HelixAPI.ValidateScope(System.String,TwitchHelixAPI.Methods)">
            <summary>
            Compare scope to endpoint to validate that the access token have the required scope
            </summary>
            <param name="url">A fully qualified url endpoint</param>
            <param name="method">The http method to make the request</param>
            <exception cref="T:System.UnauthorizedAccessException">Thrown when scope for endpoint does not exist</exception>
        </member>
        <member name="M:TwitchUnityIRC.SharedHelix.HelixAPI.RefreshToken">
            <summary>
            Refresh the current user access token
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwitchUnityIRC.SharedHelix.HelixAPI.ArraysValuesEqual``1(``0[],``0[])">
            <summary>
            <para>https://stackoverflow.com/a/6196558</para>
            </summary>
            <typeparam name="T">Type of data structure to parse JSON</typeparam>
            <param name="a1">First array to compare values</param>
            <param name="a2">First array to compare values</param>
            <returns></returns>
        </member>
        <member name="M:TwitchUnityIRC.SharedHelix.HelixAPI.GetEndpointUrl(System.String)">
            <summary>
            Get the base url of the endpoint
            </summary>
            <param name="url">A fully qualified url endpoint</param>
            <returns>The url without append query string</returns>
        </member>
        <member name="M:TwitchUnityIRC.SharedHelix.HelixAPI.IsValidated">
            <summary>
            Is current scopes valid and matches the access token
            </summary>
            <returns>True if the validation response object's user_id is not null</returns>
        </member>
        <member name="M:TwitchUnityIRC.SharedHelix.HelixAPI.ValidatedData">
            <summary>
            Uses validation endpoint to compare scopes to assure access token is valid
            </summary>
            <returns>Validation response object</returns>
        </member>
        <member name="M:TwitchUnityIRC.SharedHelix.HelixAPI.GetEndpoint``1(System.String)">
            <summary>
            Makes a Get UnityWebRequest
            </summary>
            <typeparam name="T">Type of data structure to parse JSON</typeparam>
            <param name="url">A fully qualified url endpoint</param>
            <returns>Type safe parsed JSON data</returns>
        </member>
        <member name="M:TwitchUnityIRC.SharedHelix.HelixAPI.DeleteEndpoint(System.String)">
            <summary>
            Makes a Delete UnityWebRequest
            </summary>
            <param name="url">A fully qualified url endpoint</param>
            <returns>An http status code</returns>
        </member>
        <member name="M:TwitchUnityIRC.SharedHelix.HelixAPI.PostEndpoint(System.String,System.String)">
            <summary>
            Makes a Post UnityWebRequest
            </summary>
            <param name="url">A fully qualified url endpoint</param>
            <param name="dataString">A json string {username: 'My Name'} (Can be string.Empty)</param>
            <returns>An http status code</returns>
        </member>
        <member name="M:TwitchUnityIRC.SharedHelix.HelixAPI.PostEndpoint``1(System.String)">
            <summary>
            Makes a Post UnityWebRequest
            </summary>
            <typeparam name="T">Type of data structure to parse JSON</typeparam>
            <param name="url">A fully qualified url endpoint</param>
            <returns>Type safe parsed JSON data</returns>
        </member>
        <member name="M:TwitchUnityIRC.SharedHelix.HelixAPI.PostEndpoint``1(System.String,System.String)">
            <summary>
            Makes a Post UnityWebRequest
            </summary>
            <typeparam name="T">Type of data structure to parse JSON</typeparam>
            <param name="url">A fully qualified url endpoint</param>
            <param name="dataString">A json string {username: 'My Name'}</param>
            <returns>Type safe parsed JSON data</returns>
        </member>
        <member name="M:TwitchUnityIRC.SharedHelix.HelixAPI.PutEndpoint(System.String,System.String)">
            <summary>
            Makes a Put UnityWebRequest
            </summary>
            <param name="url">A fully qualified url endpoint</param>
            <param name="dataString">A json string {username: 'My Name'}</param>
            <returns>An http status code</returns>
        </member>
        <member name="M:TwitchUnityIRC.SharedHelix.HelixAPI.PutEndpoint``1(System.String,System.String)">
            <summary>
            Makes a Put UnityWebRequest
            </summary>
            <typeparam name="T">Type of data structure to parse JSON</typeparam>
            <param name="url">A fully qualified url endpoint</param>
            <param name="dataString">A json string {username: 'My Name'}</param>
            <returns>Type safe parsed JSON data</returns>
        </member>
        <member name="M:TwitchUnityIRC.SharedHelix.HelixAPI.PatchEndpoint(System.String,System.String)">
            <summary>
            Makes a Patch UnityWebRequest
            </summary>
            <param name="url">A fully qualified url endpoint</param>
            <param name="dataString">A json string {username: 'My Name'}</param>
            <returns>An http status code</returns>
        </member>
        <member name="M:TwitchUnityIRC.SharedHelix.HelixAPI.GetTokenPath">
            <summary>
            Path where encrypted access information is stored
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwitchUnityIRC.SharedHelix.HelixAPI.OpenBrowser(System.String)">
            <summary>
            Opens a web browser on the current application platform
            <para>Supported: WindowsPlayer, WindowsEditor, OSXPlayer, OSXEditor, LinuxPlayer, LinuxEditor</para>
            </summary>
            <param name="url">A fully qualified url</param>
        </member>
        <member name="M:TwitchUnityIRC.SharedHelix.HelixAPI.MakeUnityTokenRequest(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Make a Unity Post web request for twitch access token
            </summary>
            <param name="data">Grant parameters</param>
            <returns></returns>
        </member>
        <member name="T:TwitchUnityIRC.TwitchUnityIRCSettings">
            <summary>
            Setting required to manage pools
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.TwitchUnityIRCSettings.Instance">
            <summary>
            Access to single instance class
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.TwitchUnityIRCSettings.GetTryIt">
            <summary>
            Is this version the free Try It version
            </summary>
            <returns>True if this is the Try It version</returns>
        </member>
        <member name="M:TwitchUnityIRC.TwitchUnityIRCSettings.GetInEditor">
            <summary>
            The project is running in the Unity Editor
            </summary>
            <returns>rue if this is the application is running in the Unity Editor</returns>
        </member>
        <member name="M:TwitchUnityIRC.TwitchUnityIRCSettings.DoTryIt(System.Action)">
            <summary>
            Allows action to be invoked depending on is try it version
            </summary>
            <param name="action">The action to preform.  ie The main action to disable the functionality</param>
        </member>
        <member name="T:TwitchUnityIRC.Connection.TwitchChatClient">
            <summary>
            Chat room connection client
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Connection.TwitchChatClient.server">
            <summary>
            Server to connect to
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Connection.TwitchChatClient.OpenConnection(System.String,System.Int32)">
            <summary>
            Opens a connection to a whisper group chat
            </summary>
            <param name="hostname">Host server</param>
            <param name="port">Port to connect</param>
        </member>
        <member name="T:TwitchUnityIRC.Connection.TwitchProtocol">
            <summary>
            Helper class containing connection and required IRC protocols.
            <para>Predefined formatted strings to interact with specifically with Twitch.tv IRC clients.</para>
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Connection.TwitchProtocol.HOSTNAME">
            <summary>
            Host name server
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Connection.TwitchProtocol.SERVER_CHAT">
            <summary>
            Chat name server
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Connection.TwitchProtocol.PORT_CHAT">
            <summary>
            Twitch chat port
            </summary>
        </member>
        <member name="T:TwitchUnityIRC.Connection.TwitchProtocol.CAP_REQ">
            <summary>
            Cap to sent along with the oauth
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Connection.TwitchProtocol.CAP_REQ.MEMBERSHIP">
            <summary>
            Request membership capabilities
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Connection.TwitchProtocol.CAP_REQ.COMMANDS">
            <summary>
            Request commands capabilities
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Connection.TwitchProtocol.CAP_REQ.TAGS">
            <summary>
            Request tags capabilities
            </summary>
        </member>
        <member name="F:TwitchUnityIRC.Connection.TwitchProtocol.CAP_REQ.All">
            <summary>
            Request all capabilities
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Connection.TwitchProtocol.ConnectionStrings(System.String,System.String,System.String[])">
            <summary>
            Combines the authentication message
            </summary>
            <param name="nick">Nick for connection</param>
            <param name="oauth">Password</param>
            <param name="requestCaps">Caps required</param>
            <returns></returns>
        </member>
        <member name="M:TwitchUnityIRC.Connection.TwitchProtocol.GetFormattedPRIVMSG(System.String,System.String,System.String)">
            <summary>
            Formats for a private message the normal Twitch protocol
            </summary>
            <param name="nick">The message came from</param>
            <param name="channel">The channel the message is to</param>
            <param name="message">The message</param>
            <returns>The formatted message protocol</returns>
        </member>
        <member name="M:TwitchUnityIRC.Connection.TwitchProtocol.GetFormattedPRIVMSG_SHORT(System.String,System.String)">
            <summary>
            Formats for a private message the normal Twitch protocol
            </summary>
            <param name="channel">The channel the message is to</param>
            <param name="message">The message</param>
            <returns>The formatted message protocol</returns>
        </member>
        <member name="M:TwitchUnityIRC.Connection.TwitchProtocol.GetFormattedWHISPER(System.String,System.String,System.String)">
            <summary>
            Formated string to send a whisper
            </summary>
            <param name="nick">User sending the whisper</param>
            <param name="toNick">User to send the whisper to</param>
            <param name="message">Message to send</param>
            <returns>PRIVMSG \w to send whisper</returns>
        </member>
        <member name="T:TwitchUnityIRC.Workers.TwitchWorker">
            <summary>
            Background worker for handling the client connection on a thread
            </summary>
        </member>
        <member name="P:TwitchUnityIRC.Workers.TwitchWorker.IsRunning">
            <summary>
            Is the worker running or the loop is stopped
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Workers.TwitchWorker.#ctor(System.Action)">
            <summary>
            Constructor
            </summary>
            <param name="toExecute">Action to execute in the loop</param>
        </member>
        <member name="M:TwitchUnityIRC.Workers.TwitchWorker.Stop">
            <summary>
            Stop the loop and abort the thread
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Workers.TwitchWorker.Run">
            <summary>
            Starts the loop in the thread
            </summary>
        </member>
        <member name="M:TwitchUnityIRC.Workers.TwitchWorker.Runner">
            <summary>
            Override to implement the loop.
            <para>IsRunning must be set to true here.</para>
            </summary>
        </member>
        <member name="T:IRCnect.Channel.Monitor.Capabilities.Tags.ParseHelper">
            <summary>
            Gets the value from the raw data that can't be parsed as Tags
            </summary>
        </member>
        <member name="F:IRCnect.Channel.Monitor.Capabilities.Tags.ParseHelper.properties">
            <summary>
            The property name
            </summary>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Capabilities.Tags.ParseHelper.#ctor(System.String,System.Char,System.String)">
            <summary>
            Create a new object
            <para>Recommended to create a static object ad reuse it</para>
            </summary>
            <param name="sign">The character find as a starting point for the value</param>
            <param name="split">the char to split the raw data</param>
            <param name="property">The property name</param>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Capabilities.Tags.ParseHelper.SplitTrim(System.String)">
            <summary>
            Splits and get the value from the raw data that can't be parsed as Tags
            </summary>
            <param name="rawData">Message from IRC unaltered</param>
            <returns></returns>
        </member>
        <member name="T:IRCnect.Channel.Monitor.Capabilities.Tags.TagsParser">
            <summary>
            Parse string tag into property name and value using custom types
            </summary>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Capabilities.Tags.TagsParser.Parse``1(``0,System.String[],System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary>
            Parse string tag into property name and value using custom types
            </summary>
            <typeparam name="T">Type of value to be parsed for the property value</typeparam>
            <param name="target">An IRCTags derived object</param>
            <param name="properties">Property value pair delimited by an = sign</param>
            <param name="propertyInfos">Collection of property names and info pair</param>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Capabilities.Tags.TagsParser.UnixTimeToDateTime(System.Int64)">
            <summary>
            Convert Unix time value to a DateTime object.
            original: https://ourcodeworld.com/articles/read/865/how-to-convert-an-unixtime-to-datetime-class-and-viceversa-in-c-sharp
            </summary>
            <param name="unixtime">The Unix time stamp you want to convert to DateTime.</param>
            <returns>Returns a DateTime object that represents value of the Unix time.</returns>
        </member>
    </members>
</doc>

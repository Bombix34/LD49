<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TwitchPubSubAPI</name>
    </assembly>
    <members>
        <member name="T:TwitchPubSubAPI.Payloads.EmoteMessage">
            <summary>
            Chat message sent and emote information
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.EmoteMessage.message">
            <summary>
            Chat message sent by user
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.EmoteMessage.emotes">
            <summary>
            Emotes present in the message
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Request.UnListenRequest">
            <summary>
            Request fields required to stop/unlisten from a topic
            </summary>
        </member>
        <member name="M:TwitchPubSubAPI.Payloads.Request.UnListenRequest.#ctor(System.String,System.String[])">
            <summary>
            Construct an unlisten from topic(s) request
            </summary>
            <param name="accessToken">Access token with the required scope</param>
            <param name="topics">Topics to subscribe to</param>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Request.ListenRequest">
            <summary>
            Request fields required to listen to a topic
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Request.ListenRequest.nonce">
            <summary>
            Random string to identify the response associated with this request.
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Request.ListenRequest.data">
            <summary>
            Access token and topics
            </summary>
        </member>
        <member name="M:TwitchPubSubAPI.Payloads.Request.ListenRequest.#ctor(System.String,System.String[])">
            <summary>
            Construct a listen to topic(s) request
            </summary>
            <param name="accessToken">Access token with the required scope</param>
            <param name="topics">Topics to subscribe to</param>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Request.ListenRequest.Data">
            <summary>
            Access token and topics
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Request.ListenRequest.Data.topics">
            <summary>
            The topics to subscribe to
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Request.ListenRequest.Data.auth_token">
            <summary>
            Access token with valid scopes for the topics
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Request.PingRequest">
            <summary>
            Request fields required to listen for a ping/pong handshake
            </summary>
        </member>
        <member name="M:TwitchPubSubAPI.Payloads.Request.PingRequest.#ctor">
            <summary>
            Construct a ping request object
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Response.ChatModeratorActions">
            <summary>
            A moderator performs an action in the channel. 
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.ChatModeratorActions.data">
            <summary>
            Information about the action
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Response.ChatModeratorActions.Data">
            <summary>
            Information about the action
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.ChatModeratorActions.Data.type">
            <summary>
            Type of moderation action ie. "chat_login_moderation"
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.ChatModeratorActions.Data.moderation_action">
            <summary>
            The moderation action ie. "ban" "unban"
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.ChatModeratorActions.Data.args">
            <summary>
            Contains the target user name and message
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.ChatModeratorActions.Data.created_by">
            <summary>
            The user name that created/preformed the action
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.ChatModeratorActions.Data.created_by_user_id">
            <summary>
            The user ID that created/preformed the action
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.ChatModeratorActions.Data.msg_id">
            <summary>
            Id of the message (may be empty)
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.ChatModeratorActions.Data.target_user_id">
            <summary>
            Target user ID
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.ChatModeratorActions.Data.target_user_login">
            <summary>
            Target user name (may be empty user name in 'args')
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.ChatModeratorActions.Data.from_automod">
            <summary>
            Did automod preform the action
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Response.Bits">
            <summary>
            Bits event payload data
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Bits.data">
            <summary>
            Bits event data
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Bits.version">
            <summary>
            Message version
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Bits.message_type">
            <summary>
            Message type (that is, the type of object contained in the data field)
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Bits.message_id">
            <summary>
            Message ID
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Bits.is_anonymous">
            <summary>
            Whether or not the event was anonymous.
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Response.Bits.Data">
            <summary>
            Bits event data
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Bits.Data.user_name">
            <summary>
            Login name of the person who used the Bits - if the cheer was not anonymous.
            <para>Null if anonymous</para>
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Bits.Data.channel_name">
            <summary>
            Username/broadcaster of the channel in which Bits were used.
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Bits.Data.user_id">
            <summary>
            User ID of the person who used the Bits - if the cheer was not anonymous.
            <para>Null if anonymous</para>
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Bits.Data.channel_id">
            <summary>
            ID of the channel in which Bits were used.
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Bits.Data.time">
            <summary>
            Represents an instant in time, typically expressed as a date and time of day.
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Bits.Data.chat_message">
            <summary>
            Chat message sent with the cheer.
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Bits.Data.bits_used">
            <summary>
            Number of Bits used.
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Bits.Data.total_bits_used">
            <summary>
            All-time total number of Bits used on this channel by the specified user.
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Bits.Data.context">
            <summary>
            Event type associated with this use of Bits (for example, cheer).
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Bits.Data.badge_entitlement">
            <summary>
            Information about a user’s new badge level
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Response.Bits.BadgeEntitlement">
            <summary>
            Information about a user’s new badge level
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Bits.BadgeEntitlement.new_version">
            <summary>
            New bits badge level earned
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Bits.BadgeEntitlement.previous_version">
            <summary>
            Previous bits badge level earned
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Response.Commerce">
            <summary>
            The commerce message event
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Commerce.data">
            <summary>
            Wraps the topics and message fields.
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Response.Commerce.Data">
            <summary>
            Wraps the topics and message fields
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Commerce.Data.topic">
            <summary>
            The topic that the message pertains to.
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Commerce.Data.message">
            <summary>
            The body of the message. Depending on the type of message, the message body contains different fields; see below.
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Response.Commerce.Message">
            <summary>
            The body of the user-entered commerce message.
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Commerce.Message.user_name">
            <summary>
            Login name of the person who subscribed or sent a gift subscription
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Commerce.Message.display_name">
            <summary>
            Display name of the person who subscribed or sent a gift subscription
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Commerce.Message.channel_name">
            <summary>
            Name of the channel that has been subscribed or subgifted
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Commerce.Message.user_id">
            <summary>
            User ID of the person who subscribed or sent a gift subscription
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Commerce.Message.channel_id">
            <summary>
            ID of the channel that has been subscribed or subgifted
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Commerce.Message.time">
            <summary>
            Timestamp for the event
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Commerce.Message.item_image_url">
            <summary>
            Url ti image associated with this event
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Commerce.Message.item_description">
            <summary>
            User readable/friendly description
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Commerce.Message.supports_channel">
            <summary>
            Commerce event supports channel 
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Commerce.Message.purchase_message">
            <summary>
            Message sent and emote information
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Response.Whispers">
            <summary>
            Whisper event received which can be a 'thread' sent before the incoming whisper or message object
            <para>Data class only, do not user directly</para>
            </summary>
            <summary>
            Whisper event data sent
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.data">
            <summary>
            Properties describing the whisper
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.data_object">
            <summary>
            Properties describing the whisper
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Response.Whispers.Data">
            <summary>
            Data for response properties
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.Data.id">
            <summary>
            Thread/Whisper id used to identify the upcoming whisper message
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.Data.last_read">
            <summary>
            Messages between the sender and receiver
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.Data.archived">
            <summary>
            Message is archived
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.Data.muted">
            <summary>
            User sending the message is muted
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.Data.spam_info">
            <summary>
            Message is possible spam
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.Data.whitelisted_until">
            <summary>
            Time until the message is not white listed
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.Data.message_id">
            <summary>
            Unique message id
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.Data.thread_id">
            <summary>
            Thread/Whisper id used to identify the upcoming whisper message
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.Data.body">
            <summary>
            The message intended to be read by the recipient
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.Data.sent_ts">
            <summary>
            Time the message was sent form the sender
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.Data.from_id">
            <summary>
            The senders user ID
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.Data.tags">
            <summary>
            Senders user display name and color and other properties
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.Data.recipient">
            <summary>
            Recipient user display name and color and other properties
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.Data.nonce">
            <summary>
            Random string to identify the response associated with this request.
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Response.Whispers.SpamInfo">
            <summary>
            Message is possible spam
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.SpamInfo.likelihood">
            <summary>
            Likelihood of the following whisper to be flagged as spam
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.SpamInfo.last_marked_not_spam">
            <summary>
            Time last marked as not spam
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Response.Whispers.Tags">
            <summary>
            Senders user display name and color and other properties
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.Tags.login">
            <summary>
            User name in all lowercase letters
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.Tags.display_name">
            <summary>
            User display name preserves the casing
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.Tags.color">
            <summary>
            Color of username in chat
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.Tags.emotes">
            <summary>
            Emote id and positions in message
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.Tags.badges">
            <summary>
            User badge id and version
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Response.Whispers.Recipient">
            <summary>
            Recipient user display name and color and other properties
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.Recipient.id">
            <summary>
            User ID
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.Recipient.username">
            <summary>
            User name in all lowercase letters
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.Recipient.display_name">
            <summary>
            User display name preserves the casing
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.Recipient.color">
            <summary>
            Color of username in chat
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.Recipient.profile_image">
            <summary>
            The url to the users profile image avatar
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Response.Whispers.Badge">
            <summary>
            User badge id and version
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.Badge.id">
            <summary>
            Badge id ie. 'staff'
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.Badge.version">
             <summary>
            Badge version number
             </summary>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Response.Whispers.ResponseType">
            <summary>
            The type of whisper event, thread or message
            </summary>
        </member>
        <member name="F:TwitchPubSubAPI.Payloads.Response.Whispers.ResponseType.Thread">
            <summary>
            Whisper thread event is a pre message that may be sent before the whisper message
            </summary>
        </member>
        <member name="F:TwitchPubSubAPI.Payloads.Response.Whispers.ResponseType.Message">
            <summary>
            The whisper event containing the message
            </summary>
        </member>
        <member name="M:TwitchPubSubAPI.Payloads.Response.Whispers.GetResponseType">
            <summary>
            The type of whisper event, thread or message
            </summary>
            <returns>The type of whisper event base on the type json property</returns>
        </member>
        <member name="M:TwitchPubSubAPI.Payloads.Response.Whispers.GetThreadData">
            <summary>
            Whisper thread event is a pre message data
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwitchPubSubAPI.Payloads.Response.Whispers.GetThreadDataObject">
            <summary>
            Whisper thread event is a pre message data
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwitchPubSubAPI.Payloads.Response.Whispers.GetData">
            <summary>
            Whisper event is a message data
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwitchPubSubAPI.Payloads.Response.Whispers.GetDataObject">
            <summary>
            Whisper event is a message data
            </summary>
            <returns></returns>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Response.Whispers.WhispersThreadData">
            <summary>
            Whisper thread event is a pre message data
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.WhispersThreadData.id">
            <summary>
            Thread id used to identify the upcoming whisper message
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.WhispersThreadData.last_read">
            <summary>
            Messages between the sender and receiver
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.WhispersThreadData.archived">
            <summary>
            Message is archived
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.WhispersThreadData.muted">
            <summary>
            User sending the message is muted
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.WhispersThreadData.spam_info">
            <summary>
            Message is possible spam
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.WhispersThreadData.whitelisted_until">
            <summary>
            Time until the message is not white listed
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Response.Whispers.WhispersData">
            <summary>
            Whisper event is a message data
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.WhispersData.message_id">
            <summary>
            Unique message id
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.WhispersData.id">
            <summary>
            Messages between the sender and receiver
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.WhispersData.thread_id">
            <summary>
            Thread id used to identify the upcoming whisper message
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.WhispersData.body">
            <summary>
            The message intended to be read by the recipient
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.WhispersData.sent_ts">
            <summary>
            Time the message was sent form the sender
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.WhispersData.from_id">
            <summary>
            The senders user ID
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.WhispersData.tags">
            <summary>
            Senders user display name and color and other properties
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.WhispersData.recipient">
            <summary>
            Recipient user display name and color and other properties
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Whispers.WhispersData.nonce">
            <summary>
            Random string to identify the response associated with this request.
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Response.Subscriptions">
            <summary>
            When a message for your subscription is published, you will receive a message containing the applicable data.
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Subscriptions.data">
            <summary>
            Wraps the topics and message fields.
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Response.Subscriptions.Data">
            <summary>
            Wraps the topics and message fields
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Subscriptions.Data.topic">
            <summary>
            The topic that the message pertains to.
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Subscriptions.Data.message">
            <summary>
            The body of the message. Depending on the type of message, the message body contains different fields; see below.
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Response.Subscriptions.Message">
            <summary>
            The body of the user-entered resub message. Depending on the type of message, the message body contains different fields
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Subscriptions.Message.user_name">
            <summary>
            Login name of the person who subscribed or sent a gift subscription
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Subscriptions.Message.display_name">
            <summary>
            Display name of the person who subscribed or sent a gift subscription
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Subscriptions.Message.channel_name">
            <summary>
            Name of the channel that has been subscribed or subgifted
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Subscriptions.Message.user_id">
            <summary>
            User ID of the person who subscribed or sent a gift subscription
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Subscriptions.Message.channel_id">
            <summary>
            ID of the channel that has been subscribed or subgifted
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Subscriptions.Message.time">
            <summary>
            Time when the subscription or gift was completed. RFC 3339 format
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Subscriptions.Message.sub_plan">
            <summary>
            Subscription Plan ID
            <para>values: Prime, 1000, 2000, 3000</para>
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Subscriptions.Message.sub_plan_name">
            <summary>
            Channel Specific Subscription Plan Name
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Subscriptions.Message.cumulative_months">
            <summary>
            Cumulative number of tenure months of the subscription
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Subscriptions.Message.streak_months">
            <summary>
            Denotes the user’s most recent (and contiguous) subscription tenure streak in the channel
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Subscriptions.Message.context">
            <summary>
            Event type associated with the subscription product
            <para>values: sub, resub, subgift, anonsubgift, resubgift, anonresubgift</para>
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Subscriptions.Message.is_gift">
            <summary>
            If this sub message was caused by a gift subscription
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Subscriptions.Message.sub_message">
            <summary>
            Chat message sent and emote information
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Subscriptions.Message.months">
            <summary>
            Cumulative number of months the user has given gift in the channel (Deprecated)
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Subscriptions.Message.recipient_id">
            <summary>
            User ID of the subscription gift recipient
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Subscriptions.Message.recipient_user_name">
            <summary>
            Login name of the subscription gift recipient
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Subscriptions.Message.recipient_display_name">
            <summary>
            Display name of the person who received the subscription gift
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Subscriptions.Message.multi_month_duration">
            <summary>
            Number of months gifted as part of a single, multi-month gift
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Response.BitsBadge">
            <summary>
            User earned a new bit badge
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.BitsBadge.user_id">
            <summary>
            ID of user who earned the new Bits badge
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.BitsBadge.user_name">
            <summary>
            Login of user who earned the new Bits badge
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.BitsBadge.channel_id">
            <summary>
            ID of channel where user earned the new Bits badge
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.BitsBadge.channel_name">
            <summary>
            Login of channel where user earned the new Bits badge
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.BitsBadge.badge_tier">
            <summary>
            Value of Bits badge tier that was earned (1000, 10000, etc.)
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.BitsBadge.chat_message">
            <summary>
            [Optional] Custom message included with share
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.BitsBadge.time">
            <summary>
            Time when the new Bits badge was earned. RFC 3339 format.
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Response.Points">
            <summary>
            Channel points redemption data and payload
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Points.data">
            <summary>
            Channel points redemption data
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Response.Points.Data">
            <summary>
            Channel points redemption data
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Points.Data.timestamp">
            <summary>
            Time the pubsub message was sent
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Points.Data.redemption">
            <summary>
            Data about the redemption, includes unique id and user that redeemed it
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Response.Points.Redemption">
            <summary>
            Data about the redemption, includes unique id and user that redeemed it
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Points.Redemption.id">
            <summary>
            The redemption ID
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Points.Redemption.user">
            <summary>
            User name and ID
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Points.Redemption.channel_id">
            <summary>
            ID of the channel in which the reward was redeemed.
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Points.Redemption.redeemed_at">
            <summary>
            Timestamp in which a reward was redeemed
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Points.Redemption.reward">
            <summary>
            Data about the reward that was redeemed
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Points.Redemption.status">
            <summary>
            reward redemption status, will be FULFULLED if a user skips the reward queue, UNFULFILLED otherwise
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Response.Points.Redemption.User">
            <summary>
            User name and ID
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Points.Redemption.User.id">
            <summary>
            User ID
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Points.Redemption.User.login">
            <summary>
            User login name (all lowercase)
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Points.Redemption.User.display_name">
            <summary>
            User display name
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Response.Points.Redemption.Reward">
            <summary>
            Data about the reward that was redeemed
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Points.Redemption.Reward.id">
            <summary>
            Reward id
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Points.Redemption.Reward.channel_id">
            <summary>
            ID of the channel in which the reward was redeemed.
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Points.Redemption.Reward.title">
            <summary>
            The reward title on the card
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Points.Redemption.Reward.prompt">
            <summary>
            The description of the reward
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Points.Redemption.Reward.cost">
            <summary>
            Cost in channel points for this reward
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Points.Redemption.Reward.is_user_input_required">
            <summary>
            Is the required to send a message along with the reward redemption
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Points.Redemption.Reward.image">
            <summary>
            Custom images for the reward
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Points.Redemption.Reward.default_image">
            <summary>
            Default image set
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Points.Redemption.Reward.background_color">
            <summary>
            Color of the background selected when created/edited
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Points.Redemption.Reward.max_per_stream">
            <summary>
            Redemptions allowed per stream
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Points.Redemption.Reward.should_redemptions_skip_request_queue">
            <summary>
            Skip the queue that allows the broadcaster to manually accept the reward redemption
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Points.Redemption.Reward.is_sub_only">
            <summary>
            is sub only
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Points.Redemption.Reward.is_enabled">
            <summary>
            is enabled
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Points.Redemption.Reward.is_paused">
            <summary>
            is paused
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Points.Redemption.Reward.is_in_stock">
            <summary>
            is in stock
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Points.Redemption.Reward.template_id">
            <summary>
            template id
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Points.Redemption.Reward.updated_for_indicator_at">
            <summary>
            updated for indicator at
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Response.Points.Redemption.Reward.Image">
            <summary>
            Image url for the reward card
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Points.Redemption.Reward.Image.url_1x">
            <summary>
            Images url size 1x
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Points.Redemption.Reward.Image.url_2x">
            <summary>
            Images url size 2x
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Points.Redemption.Reward.Image.url_4x">
            <summary>
            Images url size 4x
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Response.Points.Redemption.Reward.MaxPerStream">
            <summary>
            Redemptions allowed per stream
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Points.Redemption.Reward.MaxPerStream.is_enabled">
            <summary>
            Redemption max per stream enabled/disabled
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.Points.Redemption.Reward.MaxPerStream.max_per_stream">
            <summary>
            Maximum reward redemptions per stream
            <para>Only used when max per stream is enabled</para>
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Response.PayloadResponse">
            <summary>
            Response from making an topic request
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.PayloadResponse.nonce">
            <summary>
            The nonce that was passed in the request, if one was provided there.
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.PayloadResponse.error">
            <summary>
            The error message associated with the request, or an empty string if there is no error.
            <para>For Bits and whispers events requests, error responses can be: ERR_BADMESSAGE, ERR_BADAUTH, ERR_SERVER, ERR_BADTOPIC.</para>
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Response.PayloadMessage">
            <summary>
            When a message for your subscription is published, you will receive a message containing the applicable data.
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.PayloadMessage.data">
            <summary>
            Wraps the topics and message fields.
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Response.PayloadMessage.Data">
            <summary>
            Topic and message fields
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.PayloadMessage.Data.topic">
            <summary>
            The topic that the message pertains to.
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Response.PayloadMessage.Data.message">
            <summary>
            The body of the message. Depending on the type of message, the message body contains different fields; see below.
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Emote">
            <summary>
            Emote id and positions in message
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Emote.start">
            <summary>
            First index of the emote in the message
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Emote.end">
            <summary>
            Last index of the emote in the message
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Emote.id">
            <summary>
            Emote id
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.IPayload">
            <summary>
            Payload with type of message send from the server or client
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.IPayload.type">
            <summary>
            Type of message send from the server or client
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.Payloads.Payload">
            <summary>
            Payload with type of message send from the server or client
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.Payloads.Payload.type">
            <summary>
            Type of message send from the server or client
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.TaskExceptionArgs">
            <summary>
            Exception in a Task will invoke an event with these args
            </summary>
        </member>
        <member name="F:TwitchPubSubAPI.TaskExceptionArgs.exception">
            <summary>
            The exception that happened
            </summary>
        </member>
        <member name="F:TwitchPubSubAPI.TaskExceptionArgs.reason">
            <summary>
            The reason the exception happened
            </summary>
        </member>
        <member name="M:TwitchPubSubAPI.TaskExceptionArgs.#ctor(System.Exception,System.String)">
            <summary>
            Create a new task exception with the reason for the exception
            </summary>
            <param name="exception">The exception that happened</param>
            <param name="reason">The reason the exception happened</param>
        </member>
        <member name="T:TwitchPubSubAPI.ReconnectReason">
            <summary>
            Web socket reconnect attempt reason
            </summary>
        </member>
        <member name="F:TwitchPubSubAPI.ReconnectReason.None">
            <summary>
            Internal
            </summary>
        </member>
        <member name="F:TwitchPubSubAPI.ReconnectReason.Exception">
            <summary>
            Internal
            </summary>
        </member>
        <member name="F:TwitchPubSubAPI.ReconnectReason.Handshake">
            <summary>
            Handshake did not receive a PONG response
            </summary>
        </member>
        <member name="F:TwitchPubSubAPI.ReconnectReason.Closed">
            <summary>
            Socket closed
            </summary>
        </member>
        <member name="F:TwitchPubSubAPI.ReconnectReason.Aborted">
            <summary>
            Aborted for handshake failed or no topic was subscribed to
            </summary>
        </member>
        <member name="F:TwitchPubSubAPI.ReconnectReason.DefaultBreak">
            <summary>
            Break from loop was invoked from the default switch case 
            </summary>
        </member>
        <member name="F:TwitchPubSubAPI.ReconnectReason.OperationCanceled">
            <summary>
            Operation canceled can be call by the system with no ill effects
            </summary>
        </member>
        <member name="T:TwitchPubSubAPI.PubSubClient">
            <summary>
            Enables notifications from events subscribe to a topic, for updates (e.g., when a user cheers in a channel).
            </summary>
        </member>
        <member name="F:TwitchPubSubAPI.PubSubClient.HOST">
            <summary>
            Host server
            </summary>
        </member>
        <member name="E:TwitchPubSubAPI.PubSubClient.OnServerRestart">
            <summary>
            Sever has sent a reconnect message and we need to reconnect
            </summary>
        </member>
        <member name="E:TwitchPubSubAPI.PubSubClient.OnResponse">
            <summary>
            Responses received from the server
            </summary>
        </member>
        <member name="E:TwitchPubSubAPI.PubSubClient.OnPayload">
            <summary>
            Payload responses received from the server containing data
            </summary>
        </member>
        <member name="E:TwitchPubSubAPI.PubSubClient.OnReconnectRequired">
            <summary>
            Reconnection is attempted and the reason why reconnection is needed
            </summary>
        </member>
        <member name="E:TwitchPubSubAPI.PubSubClient.OnTaskException">
            <summary>
            An exception occurred within a Task
            </summary>
        </member>
        <member name="E:TwitchPubSubAPI.PubSubClient.OnBits">
            <summary>
            Cheers happen in a particular channel
            </summary>
        </member>
        <member name="E:TwitchPubSubAPI.PubSubClient.OnBitsBadge">
            <summary>
            A user earns a new Bits badge in a particular channel, and chooses to share the notification with chat.
            </summary>
        </member>
        <member name="E:TwitchPubSubAPI.PubSubClient.OnPoints">
            <summary>
            A custom reward is redeemed in a channel.
            </summary>
        </member>
        <member name="E:TwitchPubSubAPI.PubSubClient.OnSubscriptions">
            <summary>
            Anyone subscribes (first month), resubscribes (subsequent months), or gifts a subscription to a channel. 
            </summary>
        </member>
        <member name="E:TwitchPubSubAPI.PubSubClient.OnChatModeratorActions">
            <summary>
            A moderator performs an action in the channel.
            </summary>
        </member>
        <member name="E:TwitchPubSubAPI.PubSubClient.OnWhispersThread">
            <summary>
            Sent before the incoming whisper 
            <para>Can be used for validation of whisper</para>
            </summary>
        </member>
        <member name="E:TwitchPubSubAPI.PubSubClient.OnWhispers">
            <summary>
            Anyone whispers the specified user (the channel owner).
            </summary>
        </member>
        <member name="P:TwitchPubSubAPI.PubSubClient.GetState">
            <summary>
            Current websocket state
            </summary>
        </member>
        <member name="M:TwitchPubSubAPI.PubSubClient.ValidateFromAuthScopes(System.String[])">
            <summary>
            Set the underlying scopes to validate scopes on event invocation
            <para>Scope validation will not be checked if this method is not called</para>
            </summary>
            <param name="scopes">The scopes that are allowed by the current access token</param>
        </member>
        <member name="M:TwitchPubSubAPI.PubSubClient.Start(System.String,System.String,System.String[])">
            <summary>
            Initialize the connection and set up the handshake
            Topics: (https://dev.twitch.tv/docs/pubsub#topics)
            </summary>
            <param name="host">Host server to connect to</param>
            <param name="accessToken">Access token with the required scopes to listen for the desired topics</param>
            <param name="topics">Topics to handle</param>
            <returns></returns>
        </member>
        <member name="M:TwitchPubSubAPI.PubSubClient.ConnectAsync(System.String)">
            <summary>
            Connect to the PubSub server
            </summary>
            <param name="host">Host server to connect to</param>
            <returns></returns>
        </member>
        <member name="M:TwitchPubSubAPI.PubSubClient.InitComponents">
            <summary>
            Initialize websockes and other members
            </summary>
        </member>
        <member name="M:TwitchPubSubAPI.PubSubClient.Listen(System.String,System.String[])">
            <summary>
            Send a request to listen to multiple topics
            </summary>
            <param name="accessToken">Access token with the required scopes to listen for the desired topics</param>
            <param name="topics">Topics to handle</param>
            <returns></returns>
        </member>
        <member name="M:TwitchPubSubAPI.PubSubClient.UnListen(System.String,System.String[])">
            <summary>
            Send a request to stop/unlisten to multiple topics
            </summary>
            <param name="accessToken">Access token with the required scopes to listen for the desired topics</param>
            <param name="topics">Topics to handle</param>
            <returns></returns>
        </member>
        <member name="M:TwitchPubSubAPI.PubSubClient.Heartbeat">
            <summary>
            Maintains the heartbeat PING/PONG to keep the connection open
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwitchPubSubAPI.PubSubClient.Monitor">
            <summary>
            Monitor incoming websocket messages and adds them to a message queue
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwitchPubSubAPI.PubSubClient.ProcessMessageQueue">
            <summary>
            Handle incoming websocket messages that are added to the message queue
            </summary>
        </member>
    </members>
</doc>

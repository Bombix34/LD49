<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TwitchHelixAPI</name>
    </assembly>
    <members>
        <member name="T:TwitchHelixAPI.DataIO">
            <summary>
            File system storage
            </summary>
        </member>
        <member name="M:TwitchHelixAPI.DataIO.Save``1(System.String,``0)">
            <summary>
            Save object data to the file system
            </summary>
            <typeparam name="T">Type to serialize</typeparam>
            <param name="path">Full path and file name</param>
            <param name="response">Object to save</param>
        </member>
        <member name="M:TwitchHelixAPI.DataIO.Load``1(System.String)">
            <summary>
            Load an object from the file system
            </summary>
            <typeparam name="T">Type to serialize</typeparam>
            <param name="path">Full path and file name</param>
            <returns></returns>
        </member>
        <member name="T:TwitchHelixAPI.Method">
            <summary>
            Method type of the request 
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Method.NONE">
            <summary>
            Represent No request
            <para>Use when a particular request is not REST</para>
            <para>ie. PubSub WebSockets</para>
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Method.GET">
            <summary>
            Represent a GET request
            <para>Retrieves information for the server</para>
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Method.PUT">
            <summary>
            Represent a PUT request
            <para>Changes information on the server</para>
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Method.POST">
            <summary>
            Represent a POST request
            <para>Changes information on the server</para>
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Method.PATCH">
            <summary>
            Represent a PATCH request
            <para>Changes information on the server</para>
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Method.DELETE">
            <summary>
            Represent a DELETE request
            <para>Changes information on the server</para>
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Methods">
            <summary>
            
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Methods.NONE">
            <summary>
            Represent No request
            <para>Use when a particular request is not REST</para>
            <para>ie. PubSub WebSockets</para>
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Methods.GET">
            <summary>
            Represent a GET request
            <para>Retrieves information for the server</para>
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Methods.PUT">
            <summary>
            Represent a PUT request
            <para>Changes information on the server</para>
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Methods.POST">
            <summary>
            Represent a POST request
            <para>Changes information on the server</para>
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Methods.PATCH">
            <summary>
            Represent a PATCH request
            <para>Changes information on the server</para>
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Methods.DELETE">
            <summary>
            Represent a DELETE request
            <para>Changes information on the server</para>
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.Date">
            <summary>
            String to date conversion
            </summary>
        </member>
        <member name="M:TwitchHelixAPI.Payloads.Date.AsDateTime(System.String)">
            <summary>
            String to date conversion
            <para>ie. 2018-02-05T08:00:00Z</para>
            </summary>
            <param name="dateString">ie. 2018-02-05T08:00:00Z</param>
            <returns></returns>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.CodeStatus">
            <summary>
            Code and user id
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.CodeStatus.code">
            <summary>
            The code to apply action to the authenticated user’s account.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.CodeStatus.status">
            <summary>
            Represents a numeric Twitch user ID.
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.Pagination">
            <summary>
            Pagination data type with a cursor property
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Pagination.cursor">
            <summary>
            Cursor indicating when to start the next query to return more data
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.IPayload`1">
            <summary>
            A response that has a data array
            </summary>
            <typeparam name="T">Type of data to expect</typeparam>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.IPayload`1.data">
            <summary>
            The response has a JSON payload with a data field containing an array
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.DateRange">
            <summary>
            The date range of the request
            </summary>
            <summary>
            The date range of the request
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.DateRange.started_at">
            <summary>
            Timestamp for the period over which the returned data is aggregated.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.DateRange.ended_at">
            <summary>
            Timestamp for the period over which the returned data is aggregated.
            </summary>
        </member>
        <member name="M:TwitchHelixAPI.Payloads.DateRange.StartedAt">
            <summary>
            Timestamp for the period over which the returned data is aggregated.
            <para>As a date object</para>
            </summary>
        </member>
        <member name="M:TwitchHelixAPI.Payloads.DateRange.EndedAt">
            <summary>
            Timestamp for the period over which the returned data is aggregated.
            <para>As a date object</para>
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.Payload`1">
            <summary>
            A response that has a data array
            </summary>
            <typeparam name="T">Type of data to expect</typeparam>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Payload`1.data">
            <summary>
            Expected data type
            <para>Each response has an array of the requested item even if only a single item is returned</para>
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.Response.GetTopGames">
            <summary>
            Games sorted by number of current viewers on Twitch, most popular first.
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.Response.GetTopGames.TopGame">
            <summary>
            Game name and id and box art url
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetTopGames.TopGame.id">
            <summary>
            Game ID.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetTopGames.TopGame.name">
            <summary>
            Game name.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetTopGames.TopGame.boxArtUrl">
            <summary>
            Template URL for the game’s box art.
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.Response.RedeemCode">
            <summary>
            Redeems one or more provided Bits codes to the authenticated Twitch user. 
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.Response.GetCodeStatus">
            <summary>
            Gets the status of one or more provided Bits codes
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.Response.CreateEntitlementGrantsUploadURL">
            <summary>
            A URL where you can upload a manifest file and notify users that they have an entitlement.
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.Response.CreateEntitlementGrantsUploadURL.EntitlementGrantsUploadURL">
            <summary>
            A URL where you can upload a manifest file and notify users that they have an entitlement.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.CreateEntitlementGrantsUploadURL.EntitlementGrantsUploadURL.url">
            <summary>
            The URL where you will upload the manifest file. This is the URL of a pre-signed S3 bucket. Lease time: 15 minutes.
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.Response.GetClips">
            <summary>
            Clip information by clip ID (one or more), broadcaster ID (one only), or game ID (one only).
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.Response.GetClips.Clip">
            <summary>
            Clip information by clip ID (one or more), broadcaster ID (one only), or game ID (one only).
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetClips.Clip.id">
            <summary>
            ID of the clip being queried.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetClips.Clip.url">
            <summary>
            URL where the clip can be viewed.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetClips.Clip.embed_url">
            <summary>
            URL to embed the clip.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetClips.Clip.broadcaster_id">
            <summary>
            User ID of the stream from which the clip was created.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetClips.Clip.broadcaster_name">
            <summary>
            Display name corresponding to broadcaster_id.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetClips.Clip.creator_id">
            <summary>
            ID of the user who created the clip.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetClips.Clip.creator_name">
            <summary>
            Display name corresponding to creator_id.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetClips.Clip.video_id">
            <summary>
            ID of the video from which the clip was created.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetClips.Clip.game_id">
            <summary>
            ID of the game assigned to the stream when the clip was created.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetClips.Clip.language">
            <summary>
            Language of the stream from which the clip was created.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetClips.Clip.title">
            <summary>
            Title of the clip.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetClips.Clip.view_count">
            <summary>
            Number of times the clip has been viewed.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetClips.Clip.created_at">
            <summary>
            Date when the clip was created.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetClips.Clip.thumbnail_url">
            <summary>
            URL of the clip thumbnail.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetClips.pagination">
            <summary>
            Pagination data type with a cursor property
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.Response.StartCommercial">
            <summary>
            Commercial started on a specified channel.
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.Response.StartCommercial.Commercial">
            <summary>
            Commercial length and message
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.StartCommercial.Commercial.length">
            <summary>
            Length of the triggered commercial
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.StartCommercial.Commercial.message">
            <summary>
            Provides contextual information on why the request failed
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.StartCommercial.Commercial.retry_after">
            <summary>
            Seconds until the next commercial can be served on this channel
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.Response.GetGameAnalytics">
            <summary>
            Gets a URL that game developers can use to download analytics reports (CSV files) for their games. 
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.Response.GetGameAnalytics.GameAnalytics">
            <summary>
            Game analytics reports
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetGameAnalytics.GameAnalytics.game_id">
            <summary>
            ID of the game whose analytics data is being provided.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetGameAnalytics.GameAnalytics.URL">
            <summary>
            URL to the downloadable CSV file containing analytics data.
            <para>Valid for 5 minutes.</para>
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetGameAnalytics.GameAnalytics.type">
            <summary>
            Type of report.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetGameAnalytics.GameAnalytics.date_range">
            <summary>
            The date range of the request
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetGameAnalytics.pagination">
            <summary>
            Pagination data type with a cursor property
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.Response.GetBitsLeaderboard">
            <summary>
            A ranked list of Bits leaderboard information for an authorized broadcaster.
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.Response.GetBitsLeaderboard.Leaderboard">
            <summary>
            Bits leaderboard information for an authorized broadcaster.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetBitsLeaderboard.Leaderboard.user_id">
            <summary>
            ID of the user (viewer) in the leaderboard entry
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetBitsLeaderboard.Leaderboard.user_name">
            <summary>
            Display name corresponding to user_id
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetBitsLeaderboard.Leaderboard.rank">
            <summary>
            Leaderboard rank of the user.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetBitsLeaderboard.Leaderboard.score">
            <summary>
            Leaderboard score (number of Bits) of the user.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetBitsLeaderboard.date_range">
            <summary>
            The date range of the request
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetBitsLeaderboard.total">
            <summary>
            Total number of results (users) returned.
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.Response.GetCheermotes">
            <summary>
            The list of available Cheermotes, animated emotes to which viewers can assign Bits, to cheer in chat.
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.Response.GetCheermotes.Actions">
            <summary>
            TODO: Implement parser for object
            </summary>
            <summary>
            Structure containing both animated and static image sets.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetCheermotes.Actions.animated">
            <summary>
            Animated image sets containing different size image urls
            <para>NOTICE: Use GetCheermotes.Actions.Animated() instead</para>
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetCheermotes.Actions.static">
            <summary>
            Static image sets containing different size image urls
            <para>NOTICE: Use GetCheermotes.Actions.Static() instead</para>
            </summary>
        </member>
        <member name="M:TwitchHelixAPI.Payloads.Response.GetCheermotes.Actions.Animated">
            <summary>
            Animated image sets containing different size image urls
            </summary>
            <returns>Set image size(s) as key and url(s) as value</returns>
        </member>
        <member name="M:TwitchHelixAPI.Payloads.Response.GetCheermotes.Actions.Static">
            <summary>
            Static image sets containing different size image urls
            </summary>
            <returns>Set image size(s) as key and url(s) as value</returns>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.Response.GetCheermotes.Images">
            <summary>
            Structure containing both animated and static image sets, sorted by light and dark.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetCheermotes.Images.dark">
            <summary>
            Structure containing both animated and static image sets for dark mode.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetCheermotes.Images.light">
            <summary>
            Structure containing both animated and static image sets for light mode.
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.Response.GetCheermotes.Tier">
            <summary>
            Cheermotes with their meta-data
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetCheermotes.Tier.min_bits">
            <summary>
            Minimum number of bits needed to be used to hit the given tier of emote.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetCheermotes.Tier.id">
            <summary>
            ID of the emote tier.
            <para>Possible tiers are: 1,100,500,1000,5000, 10k, or 100k</para>
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetCheermotes.Tier.color">
            <summary>
            Hex code for the color associated with the bits of that tier.
            <para>Grey, Purple, Teal, Blue, or Red color to match the base bit type.</para>
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetCheermotes.Tier.images">
            <summary>
            Structure containing both animated and static image sets, sorted by light and dark.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetCheermotes.Tier.can_cheer">
            <summary>
            Indicates whether or not emote information is accessible to users.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetCheermotes.Tier.show_in_bits_card">
            <summary>
            Indicates whether or not we hide the emote from the bits card.
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.Response.GetCheermotes.Cheermote">
            <summary>
            Available Cheermotes, animated emotes to which viewers can assign Bits, to cheer in chat.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetCheermotes.Cheermote.prefix">
            <summary>
            The name before number (amount) of the cheer
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetCheermotes.Cheermote.tiers">
            <summary>
            An array of Cheermotes with their meta-data
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetCheermotes.Cheermote.type">
            <summary>
            Shows whether the emote is global_first_party,  global_third_party, channel_custom, display_only, or sponsored.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetCheermotes.Cheermote.order">
            <summary>
            Order of the emotes as shown in the bits card, in ascending order.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetCheermotes.Cheermote.last_updated">
            <summary>
            The data when this Cheermote was last updated.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetCheermotes.Cheermote.is_charitable">
            <summary>
            Indicates whether or not this emote provides a charity contribution match during charity campaigns.
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.Response.GetExtensionAnalytics">
            <summary>
            Gets a URL that extension developers can use to download analytics reports (CSV files) for their extensions.
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.Response.GetExtensionAnalytics.ExtensionAnalytics">
            <summary>
            Gets a URL that extension developers can use to download analytics reports (CSV files) for their extensions.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetExtensionAnalytics.ExtensionAnalytics.extension_id">
            <summary>
            ID of the extension whose analytics data is being provided.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetExtensionAnalytics.ExtensionAnalytics.URL">
            <summary>
            URL to the downloadable CSV file containing analytics data.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetExtensionAnalytics.ExtensionAnalytics.type">
            <summary>
            Type of report.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetExtensionAnalytics.ExtensionAnalytics.date_range">
            <summary>
            The date range of the request
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetExtensionAnalytics.pagination">
            <summary>
            Pagination data type with a cursor property
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.Response.GetExtensionTransactions">
            <summary>
            List of transactions that have occurred for their extension across all of Twitch
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.Response.GetExtensionTransactions.Cost">
            <summary>
            JSON Object representing the cost to acquire the product.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetExtensionTransactions.Cost.amount">
            <summary>
            Number of Bits required to acquire the product.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetExtensionTransactions.Cost.type">
            <summary>
            Always the string “Bits”.
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.Response.GetExtensionTransactions.ProductData">
            <summary>
            JSON Object representing the product acquired, as it looked at the time of the transaction.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetExtensionTransactions.ProductData.sku">
            <summary>
            Unique identifier for the product across the extension.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetExtensionTransactions.ProductData.cost">
            <summary>
            JSON Object representing the cost to acquire the product.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetExtensionTransactions.ProductData.displayName">
            <summary>
            Display Name of the product.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetExtensionTransactions.ProductData.inDevelopment">
            <summary>
            Flag used to indicate if the product is in development. Either true or false.
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.Response.GetExtensionTransactions.ExtensionTransaction">
            <summary>
            List of transactions that have occurred for their extension across all of Twitch
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetExtensionTransactions.ExtensionTransaction.id">
            <summary>
            Transaction IDs to look up
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetExtensionTransactions.ExtensionTransaction.timestamp">
            <summary>
            UTC timestamp when this transaction occurred.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetExtensionTransactions.ExtensionTransaction.broadcaster_id">
            <summary>
            Twitch User ID of the channel the transaction occurred on.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetExtensionTransactions.ExtensionTransaction.broadcaster_name">
            <summary>
            Twitch Display Name of the broadcaster.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetExtensionTransactions.ExtensionTransaction.user_id">
            <summary>
            Twitch User ID of the user who generated the transaction.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetExtensionTransactions.ExtensionTransaction.user_name">
            <summary>
            Twitch Display Name of the user who generated the transaction.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetExtensionTransactions.ExtensionTransaction.product_type">
            <summary>
            Enum of the product type. Currently only BITS_IN_EXTENSION.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetExtensionTransactions.ExtensionTransaction.prproduct_dataoductData">
            <summary>
            JSON Object representing the product acquired, as it looked at the time of the transaction.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetExtensionTransactions.pagination">
            <summary>
            Pagination data type with a cursor property
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.Response.CreateStreamMarker">
            <summary>
            Creates a marker in the stream of a user specified by user ID
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.Response.CreateStreamMarker.Marker">
            <summary>
            A marker is an arbitrary point in a stream that the broadcaster wants to mark; e.g., to easily return to later.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.CreateStreamMarker.Marker.id">
            <summary>
            Unique ID of the marker.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.CreateStreamMarker.Marker.created_at">
            <summary>
            RFC3339 timestamp of the marker.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.CreateStreamMarker.Marker.description">
            <summary>
            Description of the marker.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.CreateStreamMarker.Marker.position_seconds">
            <summary>
            Relative offset (in seconds) of the marker, from the beginning of the stream.
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.Response.CreateClip">
            <summary>
            Programmatically created clip
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.Response.CreateClip.Clip">
            <summary>
            Programmatically created clip
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.CreateClip.Clip.id">
            <summary>
            ID of the clip that was created.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.CreateClip.Clip.edit_url">
            <summary>
            URL of the edit page for the clip.
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.Response.GetUsers">
            <summary>
            Response about a specified Twitch users
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Payloads.Response.GetUsers.User">
            <summary>
            Twitch users
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetUsers.User.id">
            <summary>
            Twitch User’s ID.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetUsers.User.login">
            <summary>
            User’s login name.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetUsers.User.display_name">
            <summary>
            User’s display name.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetUsers.User.type">
            <summary>
            User’s type: "staff", "admin", "global_mod", or ""
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetUsers.User.broadcaster_type">
            <summary>
            User’s broadcaster type: "partner", "affiliate", or "".
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetUsers.User.description">
            <summary>
            User’s channel description.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetUsers.User.profile_image_url">
            <summary>
            URL of the user’s profile image.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetUsers.User.offline_image_url">
            <summary>
            URL of the user’s offline image.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetUsers.User.view_count">
            <summary>
            Total number of views of the user’s channel.
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Payloads.Response.GetUsers.User.email">
            <summary>
            User’s email address. 
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.TokenResponse">
            <summary>
            Expected token response properties
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.TokenResponse.access_token">
            <summary>
            Scoped access token
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.TokenResponse.refresh_token">
            <summary>
            Refresh token used refresh the access token when expired
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.TokenResponse.expires_in">
            <summary>
            Amount of seconds the token will live
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.TokenResponse.scope">
            <summary>
            Scopes requires to success desired endpoints
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.TokenResponse.token_type">
            <summary>
            User access token type 
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.TokenResponse.expires">
            <summary>
            The Date/Time the toke will expire
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.TokenRequest">
            <summary>
            Properties required to make a valid token request
            <para>Create an application here: https://dev.twitch.tv/console </para>
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.TokenRequest.clientId">
            <summary>
            The client id provided for the app
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.TokenRequest.clientSecret">
            <summary>
            The client secret provided for the app
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.TokenRequest.redirectUrl">
            <summary>
            The redirect url that was used to create the app
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.TokenRequest.scopes">
            <summary>
            The scopes required to used endpoints
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.TokenRequest.forceVerify">
            <summary>
            Force the user to go through the auth flow
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Helix">
            <summary>
            Provides a connection to the Twitch API information
            </summary>
        </member>
        <member name="M:TwitchHelixAPI.Helix.GetEndpoint``1(System.String,System.String,System.String,System.String,System.Func{System.String,System.String,System.String,System.String,System.Threading.Tasks.Task{``0}})">
            <summary>
            Get an endpoint based on the url and scopes requested within the access token
            </summary>
            <typeparam name="T">Type of data structure to parse JSON</typeparam>
            <param name="url">A fully qualified url endpoint</param>
            <param name="method">GET, PUT, POST</param>
            <param name="clientId">The client id provided for the app</param>
            <param name="accessToken">Access token with scopes to match the endpoint</param>
            <param name="makeRequest">The method used to get the data</param>
            <returns>Type of data structure to parse JSON</returns>
        </member>
        <member name="M:TwitchHelixAPI.Helix.IsExpired(System.String)">
            <summary>
            Has the token expired
            </summary>
            <param name="expires">Date string</param>
            <returns></returns>
        </member>
        <member name="M:TwitchHelixAPI.Helix.MakeTokenRequest(System.String,TwitchHelixAPI.TokenRequest,System.Func{System.Collections.Generic.Dictionary{System.String,System.String},System.Threading.Tasks.Task{TwitchHelixAPI.TokenResponse}},System.Action{System.String})">
            <summary>
            Make a request to get an access token
            </summary>
            <param name="path">Path to save encrypted token</param>
            <param name="tokenRequest">Properties required to make a valid token request</param>
            <param name="makeRequest">The method used to get the data</param>
            <param name="openBrowser">The method to open the web browser</param>
            <returns> Expected token response properties containing the tokens and expire time</returns>
        </member>
        <member name="M:TwitchHelixAPI.Helix.RefreshAccessToken(System.String,System.String,System.String,System.Func{System.Collections.Generic.Dictionary{System.String,System.String},System.Threading.Tasks.Task{TwitchHelixAPI.TokenResponse}})">
            <summary>
            Call to refresh access token
            </summary>
            <param name="clientId">The client id provided for the app</param>
            <param name="clientSecret">The client secret provided for the app</param>
            <param name="refreshToken">The refresh token received from making an access token request</param>
            <param name="makeRequest">The method used to get the data</param>
            <returns> Expected token response properties containing the tokens and expire time</returns>
        </member>
        <member name="M:TwitchHelixAPI.Helix.Base64UrlEncode(System.Byte[])">
            <summary>
            From https://github.com/IdentityModel/IdentityModel2 (src/IdentityModel/Base64Url.cs)
            </summary>
            <param name="buffer">The hash value for the specified byte array</param>
            <returns></returns>
        </member>
        <member name="T:TwitchHelixAPI.Authentication">
            <summary>
            Endpoints and scopes to make API requests
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.BASE_URL">
            <summary>
            Endpoint base url append target endpoint to make request
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Authentication.Scoped">
            <summary>
            Scope and topic or endpoint map item
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Authentication.Scoped.key">
            <summary>
            Topic or endpoint used for scope reference
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Authentication.Scoped.scope">
            <summary>
            The scope required to use the key (topic or endpoint)
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Authentication.ScopedEndpoint">
            <summary>
            Scope and endpoint map item
            </summary>
        </member>
        <member name="P:TwitchHelixAPI.Authentication.ScopedEndpoint.method">
            <summary>
            The http method use to make the request ie. "POST"
            </summary>
        </member>
        <member name="M:TwitchHelixAPI.Authentication.HasScope(System.String)">
            <summary>
            Does the scope exist in the internal list
            </summary>
            <param name="scope">Scope to look up</param>
            <returns></returns>
        </member>
        <member name="M:TwitchHelixAPI.Authentication.GetAssociatedScope(TwitchHelixAPI.Methods,System.String)">
            <summary>
            Get the scope associated with an Helix endpoint
            </summary>
            <param name="method">The http method to make the request</param>
            <param name="url">Fully qualified endpoint url</param>
            <returns>The associated scope</returns>
        </member>
        <member name="M:TwitchHelixAPI.Authentication.GetAssociatedScope(System.String)">
            <summary>
            Get the scope associated with a PubSub topic
            </summary>
            <param name="topic">PubSub topic</param>
            <returns>The associated scope</returns>
        </member>
        <member name="T:TwitchHelixAPI.Authentication.Endpoints">
            <summary>
            Endpoints available from the API
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.START_COMMERCIAL">
            <summary>
            Starts a commercial on a specified channel.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_CHANNEL_EDITORS">
            <summary>
            Gets a list of users who have editor permissions for a specific channel.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_EXTENSION_ANALYTICS">
            <summary>
            Gets a URL that extension developers can use to download analytics reports (CSV files) for their extensions.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_CHEERMOTES">
            <summary>
            Retrieves the list of available Cheermotes, animated emotes to which viewers can assign Bits, to cheer in chat.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_BITS_LEADERBOARD">
            <summary>
            Gets a ranked list of Bits leaderboard information for an authorized broadcaster.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_GAME_ANALYTICS">
            <summary>
            Gets a URL that game developers can use to download analytics reports (CSV files) for their games.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_EXTENSION_TRANSACTIONS">
            <summary>
            Get Extension Transactions allows extension back end servers to fetch a list of transactions that have occurred for their extension across all of Twitch.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.CREATE_CLIP">
            <summary>
            Creates a clip programmatically. This returns both an ID and an edit URL for the new clip.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_CLIPS">
            <summary>
            Gets clip information by clip ID (one or more), broadcaster ID (one only), or game ID (one only). 
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_CODE_STATUS">
            <summary>
            Gets the status of one or more provided Bits codes.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_DROPS_ENTITLEMENT">
            <summary>
            Gets a list of entitlements for a given organization that have been granted to a game, user, or both.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.REDEEM_CODE">
            <summary>
            Redeems one or more provided Bits codes to the authenticated Twitch user.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.CREATE_EVENTSUB_SUBSCRIPTION">
            <summary>
            Creates an EventSub subscription.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.DELETE_EVENTSUB_SUBSCRIPTION">
            <summary>
            Delete an EventSub subscription.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_EVENTSUB_SUBSCRIPTIONS">
            <summary>
            Get a list of your EventSub subscriptions. The subscriptions are paginated and ordered by most recent first.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_TOP_GAMES">
            <summary>
            Gets games sorted by number of current viewers on Twitch, most popular first.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_GAMES">
            <summary>
            Gets game information by game ID or name.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_HYPE_TRAIN_EVENTS">
            <summary>
            Gets the information of the most recent Hype Train of the given channel ID.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.CHECK_AUTO_MOD_STATUS">
            <summary>
            Gets the information of the most recent Hype Train of the given channel ID.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_BANNED_USERS">
            <summary>
            Returns all banned and timed-out users in a channel.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_BANNED_EVENTS">
            <summary>
            Returns all user bans and unbans in a channel.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_MODERATORS">
            <summary>
            Returns all moderators in a channel.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_MODERATOR_EVENTS">
            <summary>
            Returns a list of moderators or users added and removed as moderators from a channel.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.SEARCH_CATEGORIES">
            <summary>
            Returns a list of games or categories that match the query via name either entirely or partially.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.SEARCH_CHANNELS">
            <summary>
            Returns a list of channels (users who have streamed within the past 6 months)
            <para>that match the query via channel name or description either entirely or partially.</para>
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_STREAM_KEY">
            <summary>
            Gets the channel stream key for a user.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_STREAMS">
            <summary>
            Gets information about active streams. Streams are returned sorted by number of current viewers, in descending order.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_FOLLOWED_STREAMS">
            <summary>
            Gets information about active streams belonging to channels that the authenticated user follows.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.CREATE_STREAM_MARKER">
            <summary>
            Creates a marker in the stream of a user specified by user ID.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_STREAM_MARKERS">
            <summary>
            Gets a list of markers for either a specified user’s most recent stream or a specified VOD/video (stream), ordered by recency.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_CHANNEL_INFORMATION">
            <summary>
            Gets channel information for users.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.MODIFY_CHANNEL_INFORMATION">
            <summary>
            Modifies channel information for users.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.CREATE_CUSTOM_REWARDS">
            <summary>
            Creates a Custom Reward on a channel.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.DELETE_CUSTOM_REWARDS">
            <summary>
            Deletes a Custom Reward on a channel.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_CUSTOM_REWARDS">
            <summary>
            Returns a list of Custom Reward objects for the Custom Rewards on a channel.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_CUSTOM_REWARD_REDEMPTIONS">
            <summary>
            Returns Custom Reward Redemption objects for a Custom Reward on a channel that was created by the same client_id.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.UPDATE_CUSTOM_REWARDS">
            <summary>
            Updates a Custom Reward created on a channel.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.UPDATE_REDEMPTION_STATUS">
            <summary>
            Updates the status of Custom Reward Redemption objects on a channel that are in the UNFULFILLED status.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_BROADCASTER_SUBSCRIPTIONS">
            <summary>
            Get all of a broadcaster’s subscriptions.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.CHECK_USER_SUBSCRIPTION">
            <summary>
            Checks if a specific user (user_id) is subscribed to a specific channel (broadcaster_id).
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_ALL_STREAM_TAGS">
            <summary>
            Gets the list of all stream tags defined by Twitch, optionally filtered by tag ID(s).
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_STREAM_TAGS">
            <summary>
            Gets the list of tags for a specified stream (channel).
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.REPLACE_STREAM_TAGS">
            <summary>
            Applies specified tags to a specified stream, overwriting any existing tags applied to that stream.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_CHANNEL_TEAMS">
            <summary>
            Retrieves a list of Twitch Teams of which the specified channel/broadcaster is a member.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_TEAMS">
            <summary>
            Gets information for a specific Twitch Team.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.CREATE_USER_FOLLOWS">
            <summary>
            Adds a specified user to the followers of a specified channel.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_USER_BLOCK_LIST">
            <summary>
            Gets a specified user’s block list. The list is sorted by when the block occurred in descending order (i.e. most recent block first).
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.BLOCK_USER">
            <summary>
            Blocks the specified user on behalf of the authenticated user.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.UNBLOCK_USER">
            <summary>
            Unblocks the specified user on behalf of the authenticated user.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.DELETE_USER_FOLLOWS">
            <summary>
            Deletes a specified user from the followers of a specified channel.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_USERS">
            <summary>
            Gets information about one or more specified Twitch users.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_USERS_FOLLOWS">
            <summary>
            Gets information on follow relationships between two Twitch users.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.UPDATE_USER">
            <summary>
            Updates the description of a user specified by a Bearer token.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_USER_EXTENSIONS">
            <summary>
            Gets a list of all extensions (both active and inactive) for a specified user, identified by a Bearer token.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_USER_ACTIVE_EXTENSIONS">
            <summary>
            Gets information about active extensions installed by a specified user, identified by a user ID or Bearer token.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.UPDATE_USER_EXTENSIONS">
            <summary>
            Updates the activation state, extension ID, and/or version number of installed extensions for a specified user, identified by a Bearer token.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_VIDEOS">
            <summary>
            Gets video information by video ID (one or more), user ID (one only), or game ID (one only).
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.DELETE_VIDEOS">
            <summary>
            Deletes one or more videos. Videos are past broadcasts, Highlights, or uploads.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Endpoints.GET_WEBHOOK_SUBSCRIPTIONS">
            <summary>
            Gets the Webhook subscriptions of a user identified by a Bearer token, in order of expiration.
            </summary>
        </member>
        <member name="M:TwitchHelixAPI.Authentication.Endpoints.GetEndpoint(System.String)">
            <summary>
            Get the endpoint without the base url {Authentication.BASE_URL}
            </summary>
            <param name="url">Fully qualified url</param>
            <returns>Endpoint without the base url ie. /users/follows</returns>
        </member>
        <member name="T:TwitchHelixAPI.Authentication.Scopes">
            <summary>
            When you request authorization from users, the URL scope parameter allows you to specify which permissions your app requires
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Authentication.Scopes.NewTwitchAPI">
            <summary>
            These scopes apply to both OAuth and OIDC token requests. You can specify any or all of these scopes
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.NewTwitchAPI.ANALYTICS_READ_EXTENSIONS">
            <summary>
            View analytics data for your extensions.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.NewTwitchAPI.ANALYTICS_READ_GAMES">
            <summary>
            View analytics data for your games.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.NewTwitchAPI.BITS_READ">
            <summary>
            View Bits information for your channel.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.NewTwitchAPI.CHANNEL_EDIT_COMMERCIAL">
            <summary>
            Run commercials on a channel.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.NewTwitchAPI.CHANNEL_MANAGE_BROADCAST">
            <summary>
            Manage a channel’s broadcast configuration, including updating channel configuration and managing stream markers and stream tags.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.NewTwitchAPI.CHANNEL_MANAGE_EXTENSIONS">
            <summary>
            Manage a channel’s Extension configuration, including activating Extensions.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.NewTwitchAPI.CHANNEL_MANAGE_REDEMPTIONS">
            <summary>
            Manage Channel Points custom rewards and their redemptions on a channel.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.NewTwitchAPI.CHANNEL_MANAGE_VIDEOS">
            <summary>
            Manage a channel’s videos, including deleting videos.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.NewTwitchAPI.CHANNEL_READ_EDITORS">
            <summary>
            View a list of users with the editor role for a channel.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.NewTwitchAPI.CHANNEL_READ_HYPE_TRAIN">
            <summary>
            No description in docs
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.NewTwitchAPI.CHANNEL_READ_REDEMPTIONS">
            <summary>
            View Channel Points custom rewards and their redemptions on a channel.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.NewTwitchAPI.CHANNEL_READ_STREAM_KEY">
            <summary>
            Read authorized user’s stream key.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.NewTwitchAPI.CHANNEL_READ_SUBSCRIPTIONS">
            <summary>
            View a list of all subscribers to a channel and check if a user is subscribed to a channel.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.NewTwitchAPI.CLIPS_EDIT">
            <summary>
            Manage a clip object.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.NewTwitchAPI.MODERATION_READ">
            <summary>
            Not in docs
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.NewTwitchAPI.USER_EDIT">
            <summary>
            Manage a user object.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.NewTwitchAPI.USER_EDIT_FOLLOWS">
            <summary>
            Edit your follows.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.NewTwitchAPI.USER_MANAGE_BLOCKED_USERS">
            <summary>
            Manage the block list of a user.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.NewTwitchAPI.USER_READ_BLOCKED_USERS">
            <summary>
            View the block list of a user.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.NewTwitchAPI.USER_READ_BROADCAST">
            <summary>
            View your broadcasting configuration, including extension configurations.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.NewTwitchAPI.USER_EDIT_BROADCAST">
            <summary>
            Edit your channel’s broadcast configuration, including extension configuration. (This scope implies user:read:broadcast capability.)
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.NewTwitchAPI.USER_READ_FOLLOWS">
            <summary>
            View the list of channels a user follows.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.NewTwitchAPI.USER_READ_SUBSCRIPTIONS">
            <summary>
            View if an authorized user is subscribed to specific channels.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.NewTwitchAPI.USER_READ_EMAIL">
            
        </member>
        <member name="T:TwitchHelixAPI.Authentication.Scopes.TwitchAPIv5">
            <summary>
            You can specify any or all of these scopes
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.TwitchAPIv5.CHANNEL_CHECK_SUBSCRIPTION">
            <summary>
            Read whether a user is subscribed to your channel.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.TwitchAPIv5.CHANNEL_COMMERCIAL">
            <summary>
            Trigger commercials on channel.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.TwitchAPIv5.CHANNEL_EDITOR">
            <summary>
            Write channel meta-data (game, status, etc).
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.TwitchAPIv5.CHANNEL_FEED_EDIT">
            <summary>
            Add posts and reactions to a channel feed.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.TwitchAPIv5.CHANNEL_FEED_READ">
            <summary>
            View a channel feed.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.TwitchAPIv5.CHANNEL_READ">
            <summary>
            Read nonpublic channel information, including email address and stream key.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.TwitchAPIv5.CHANNEL_STREAM">
            <summary>
            Reset a channel’s stream key.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.TwitchAPIv5.CHANNEL_SUBSCRIPTIONS">
            <summary>
            Read all subscribers to your channel.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.TwitchAPIv5.CHAT_LOGIN">
            <summary>
            (Deprecated — cannot be requested by new clients.) Log into chat and send messages.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.TwitchAPIv5.COLLECTIONS_EDIT">
            <summary>
            Manage a user’s collections (of videos).
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.TwitchAPIv5.COMMUNITIES_EDIT">
            <summary>
            Manage a user’s communities.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.TwitchAPIv5.COMMUNITIES_MODERATE">
            <summary>
            Manage community moderators.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.TwitchAPIv5.OPEN_ID">
            <summary>
            Use OpenID Connect authentication.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.TwitchAPIv5.USER_BLOCKS_EDIT">
            <summary>
            Turn on/off ignoring a user. Ignoring users means you cannot see them type, receive messages from them, etc.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.TwitchAPIv5.USER_BLOCKS_READ">
            <summary>
            Read a user’s list of ignored users.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.TwitchAPIv5.USER_FOLLOWS_EDIT">
            <summary>
            Manage a user’s followed channels.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.TwitchAPIv5.USER_READ">
            <summary>
            Read nonpublic user information, like email address.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.TwitchAPIv5.USER_SUBSCRIPTIONS">
            <summary>
            Read a user’s subscriptions.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.TwitchAPIv5.VIEWING_ACTIVITY_READ">
            <summary>
            Turn on Viewer Heartbeat Service ability to record user data.
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Authentication.Scopes.ChatAndPubSub">
            <summary>
            Chat and PubSub based scopes
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.ChatAndPubSub.CHANNEL_MODERATE">
            <summary>
            Perform moderation actions in a channel. The user requesting the scope must be a moderator in the channel.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.ChatAndPubSub.CHAT_EDIT">
            <summary>
            Send live stream chat and rooms messages.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.ChatAndPubSub.CHAT_READ">
            <summary>
            View live stream chat and rooms messages.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.ChatAndPubSub.WHISPERS_READ">
            <summary>
            View your whisper messages.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.Scopes.ChatAndPubSub.WHISPERS_EDIT">
            <summary>
            Send whisper messages.
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Authentication.Helix">
            <summary>
            Helix API scopes and endpoints
            </summary>
        </member>
        <member name="M:TwitchHelixAPI.Authentication.Helix.ScopeMap">
            <summary>
            Mapping of the API endpoints to the required scopes
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwitchHelixAPI.Authentication.Helix.AddScope(System.String,System.String,System.String)">
            <summary>
            Add a scope to the endpoint map
            </summary>
            <param name="method">The http method used to make the request. ie "POST"</param>
            <param name="endpoint">The endpoint without the base url</param>
            <param name="scope">Scope that the endpoint requires</param>
        </member>
        <member name="T:TwitchHelixAPI.Authentication.PubSub">
            <summary>
            PubSub topics and scopes
            <para>PubSub enables you to subscribe to a topic, for updates (e.g., when a user cheers in a channel).</para>
            </summary>
        </member>
        <member name="T:TwitchHelixAPI.Authentication.PubSub.Topics">
            <summary>
            Topics to subscribe to receive events
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.PubSub.Topics.CHANNEL_BITS_EVENTS_V1">
            <summary>
            Anyone cheers in a specified channel.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.PubSub.Topics.CHANNEL_BITS_EVENTS_V2">
            <summary>
            Anyone cheers in a specified channel.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.PubSub.Topics.CHANNEL_BITS_BADGE_UNLOCKS">
            <summary>
            Message sent when a user earns a new Bits badge in a particular channel, and chooses to share the notification with chat.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.PubSub.Topics.CHANNEL_POINTS_CHANNEL_V1">
            <summary>
            A custom reward is redeemed in a channel.
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.PubSub.Topics.CHANNEL_SUBSCRIBE_EVENTS_V1">
            <summary>
            Anyone subscribes (first month), resubscribes (subsequent months), or gifts a subscription to a channel.
            <para>Subgift subscription messages contain recipient information.</para>
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.PubSub.Topics.CHAT_MODERATOR_ACTIONS">
            <summary>
            A moderator performs an action in the channel. 
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Authentication.PubSub.Topics.WHISPER">
            <summary>
            Anyone whispers the specified user.
            </summary>
        </member>
        <member name="M:TwitchHelixAPI.Authentication.PubSub.ScopeMap">
            <summary>
            Mapping of the API topics to the required scopes
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwitchHelixAPI.Authentication.PubSub.AddScope(System.String,System.String)">
            <summary>
            Add a scope to the endpoint map
            </summary>
            <param name="topic">The topic that requires the scope</param>
            <param name="scope">Scope that the topic requires</param>
        </member>
        <member name="T:TwitchHelixAPI.Validate">
            <summary>
            Validation response object
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Validate.client_id">
            <summary>
            Application client id
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Validate.login">
            <summary>
            Username or channel name
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Validate.scopes">
            <summary>
            Scopes matching the current access token
            </summary>
        </member>
        <member name="F:TwitchHelixAPI.Validate.user_id">
            <summary>
            The user id for the username/channel name
            </summary>
        </member>
    </members>
</doc>
